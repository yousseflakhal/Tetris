// --- Board.cpp ---
#include "Board.hpp"


Board::Board(int rows, int cols, int cellSize, SDL_Color backgroundColor, uint32_t seed)
    : rows(rows), cols(cols), cellSize(cellSize), backgroundColor(backgroundColor),
      grid(rows, std::vector<int>(cols, 0)),
      colorGrid(rows, std::vector<SDL_Color>(cols, {0, 0, 0, 0})),
      rng(seed) {
        hardDropAnims.reserve(64);
        bubbleParticles.reserve(512);
        landingAnims.reserve(128);
      }

Board::~Board() {
    if (whiteCellTexture) { SDL_DestroyTexture(whiteCellTexture); whiteCellTexture = nullptr; }
    clearTileTextures();
    if (gridBgTex) { SDL_DestroyTexture(gridBgTex); gridBgTex = nullptr; }
}

void Board::initializeTexture(SDL_Renderer* renderer) {
    if (cellSize <= 2) return;
    if (whiteCellTexture) {
        SDL_DestroyTexture(whiteCellTexture);
        whiteCellTexture = nullptr;
    }

    whiteCellTexture = SDL_CreateTexture(renderer,
                                         SDL_PIXELFORMAT_RGBA8888,
                                         SDL_TEXTUREACCESS_TARGET,
                                         cellSize - 2, cellSize - 2);

    if (!whiteCellTexture) {
        SDL_Log("Failed to create whiteCellTexture: %s", SDL_GetError());
        return;
    }

    if (SDL_SetTextureBlendMode(whiteCellTexture, SDL_BLENDMODE_BLEND) != 0) {
        SDL_Log("Failed to set blend mode for whiteCellTexture: %s", SDL_GetError());
        SDL_DestroyTexture(whiteCellTexture);
        whiteCellTexture = nullptr;
        return;
    }

    if (SDL_SetRenderTarget(renderer, whiteCellTexture) != 0) {
        SDL_Log("Failed to set render target: %s", SDL_GetError());
        SDL_DestroyTexture(whiteCellTexture);
        whiteCellTexture = nullptr;
        return;
    }

    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
    SDL_RenderClear(renderer);
    draw_smooth_rounded_rect(renderer, 0, 0, cellSize - 2, cellSize - 2, 2,
                             {255, 255, 255, 255}, true);

    SDL_SetRenderTarget(renderer, nullptr);
}

bool Board::isOccupied(const std::vector<std::pair<int, int>>& coords, int dx, int dy) const noexcept {
    for (const auto& coord : coords) {
        int x = coord.first + dx;
        int y = coord.second + dy;

        if (x < 0 || x >= cols || y >= rows) {
            return true;
        }

        if (y < 0) {
            continue;
        }

        if (grid[y][x] != 0) {
            return true;
        }
    }
    return false;
}

void Board::placeShape(const Shape& shape) {
    for (const auto& coord : shape.getCoords()) {
        int x = coord.first;
        int y = coord.second;
        
        if (y >= 0 && y < rows && x >= 0 && x < cols) {
            grid[y][x] = 1;
            colorGrid[y][x] = shape.getColor();

            landingAnims.push_back({x, y, SDL_GetTicks()});
        }
    }
}

Uint8 Board::landingAlpha(int x, int y, Uint32 now) const noexcept {
    for (const auto& a : landingAnims) {
        if (a.x == x && a.y == y) {
            Uint32 t = now - a.startTime;

            if (t < FADE_OUT_MS) {
                float p = t / float(FADE_OUT_MS);
                return Uint8(255 - p * 200);
            } else if (t < FADE_OUT_MS + FADE_IN_MS) {
                float p = (t - FADE_OUT_MS) / float(FADE_IN_MS);
                return Uint8(55 + p * 200);
            }
        }
    }
    return 255;
}



int Board::clearFullLines() {
    linesToClear.clear();
    for (int y = rows - 1; y >= 0; --y) {
        if (std::all_of(grid[y].begin(), grid[y].end(), [](int cell) { return cell != 0; })) {
            linesToClear.push_back(y);
        }
    }
    if (!linesToClear.empty()) {
        isClearingLines = true;
        clearStartTime = SDL_GetTicks();
    }
    return linesToClear.size();
}

void Board::draw(SDL_Renderer* renderer, int offsetX, int offsetY, bool showPlacedBlocks) const {
    const int boardWidth  = cols * cellSize;
    const int boardHeight = rows * cellSize;
    const int gridGap = 1;

    auto isRowClearing = [this](int y) {
        for (int r : linesToClear) if (r == y) return true;
        return false;
    };

    if (gridBgTex == nullptr) {
        const_cast<Board*>(this)->rebuildGridBackground(renderer);
    }
    if (gridBgTex) {
        SDL_Rect dst{ offsetX, offsetY, boardWidth, boardHeight };
        SDL_RenderCopy(renderer, gridBgTex, nullptr, &dst);
    }

    Uint32 now = SDL_GetTicks();
    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);

    for (int y = 0; y < rows; ++y) {
        const bool isLineClearing = isClearingLines && isRowClearing(y);
        for (int x = 0; x < cols; ++x) {
            const bool isFullCell = (grid[y][x] != 0);
            if (!showPlacedBlocks || !isFullCell) continue;

            const int cellX = offsetX + x * cellSize + gridGap;
            const int cellY = offsetY + y * cellSize + gridGap;
            const int cellDrawSize = cellSize - 2 * gridGap;

            if (isLineClearing) {
                SDL_Color color = colorGrid[y][x];
                Uint32 currentTime = SDL_GetTicks();
                float elapsed = static_cast<float>(currentTime - clearStartTime);
                float progress = std::min(elapsed / 500.0f, 1.0f);
                Uint8 alpha = static_cast<Uint8>(255 * (1.0f - progress));
                float rotation = 360.0f * progress;
                SDL_Rect destRect = {cellX, cellY, cellDrawSize, cellDrawSize};

                SDL_SetTextureColorMod(whiteCellTexture, color.r, color.g, color.b);
                SDL_SetTextureAlphaMod(whiteCellTexture, alpha);
                SDL_RenderCopyEx(renderer, whiteCellTexture, nullptr, &destRect, rotation, nullptr, SDL_FLIP_NONE);
            } else {
                SDL_Color base = colorGrid[y][x];
                SDL_Rect dst{ cellX, cellY, cellDrawSize, cellDrawSize };

                SDL_Texture* tex = getTileTexture(renderer, base);
                if (tex) SDL_RenderCopy(renderer, tex, nullptr, &dst);
                Uint8 a = landingAlpha(x, y, now);
                if (a < 255) {
                    Uint8 glow = static_cast<Uint8>((255 - a) * 0.9f);

                    SDL_Rect dst{ cellX, cellY, cellDrawSize, cellDrawSize };

                    SDL_SetTextureColorMod(whiteCellTexture, 255, 255, 255);
                    SDL_SetTextureAlphaMod(whiteCellTexture, glow);

                    SDL_SetTextureBlendMode(whiteCellTexture, SDL_BLENDMODE_ADD);
                    SDL_RenderCopy(renderer, whiteCellTexture, nullptr, &dst);
                    SDL_SetTextureBlendMode(whiteCellTexture, SDL_BLENDMODE_BLEND);
                }
            }
        }
    }

    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_ADD);
    
    for (const auto& anim : hardDropAnims) {
        Uint32 elapsed = now - anim.startTime;
        if (elapsed > HARD_DROP_ANIM_DURATION) continue;
        float progress = elapsed / (float)HARD_DROP_ANIM_DURATION;
        Uint8 baseAlpha = static_cast<Uint8>(180 * (1.0f - progress * progress));
        int cellX = offsetX + anim.col * cellSize;
        int span = std::max(1, anim.endRow - anim.startRow);

        for (int row = anim.startRow; row < anim.endRow; ++row) {
            float rowT = (row - anim.startRow) / float(span);
            float falloff = rowT * rowT;
            Uint8 rowAlpha = static_cast<Uint8>(baseAlpha * falloff);
            int cellY = offsetY + row * cellSize;
            SDL_Rect flashRect = { cellX + 1, cellY + 1, cellSize - 2, cellSize - 2 };
            SDL_SetRenderDrawColor(renderer, 180, 180, 180, rowAlpha);
            SDL_RenderFillRect(renderer, &flashRect);
        }
    }
    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_NONE);

    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);
    for (const auto& p : bubbleParticles) {
        int px = offsetX + static_cast<int>(p.x * cellSize);
        int py = offsetY + static_cast<int>(p.y * cellSize);
        int radius = std::max(1, cellSize / 16);
        SDL_Color col{255, 255, 255, p.alpha};
        drawAACircle(renderer, px, py, radius, col);
    }
    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_NONE);
}



int Board::getRows() const noexcept {
    return rows;
}

int Board::getCols() const noexcept {
    return cols;
}

int Board::getCellSize() const noexcept {
    return cellSize;
}

const std::vector<std::vector<int>>& Board::getGrid() const noexcept {
    return grid;
}

const std::vector<int>& Board::getLinesToClear() const noexcept {
    return linesToClear;
}

int Board::countFullLines() const {
    int fullLineCount = 0;
    for (int y = 0; y < rows; ++y) {
        bool isFull = std::all_of(grid[y].begin(), grid[y].end(),
                                  [](int cell) { return cell != 0; });
        if (isFull) {
            fullLineCount++;
        }
    }
    return fullLineCount;
}

int Board::countHoles() const {
    int holes = 0;
    
    for (int x = 0; x < cols; ++x) {
        bool foundBlockInColumn = false;
        
        for (int y = 0; y < rows; ++y) {
            if (grid[y][x] != 0) {
                foundBlockInColumn = true;
            } else {
                if (foundBlockInColumn) {
                    holes++;
                }
            }
        }
    }
    return holes;
}

std::pair<std::vector<std::pair<int, int>>, bool> Board::getSurfaceCoordsAndFlatStatus(int x) const {
    std::vector<std::pair<int, int>> surfaceCoords;

    if (x < 1 || x >= cols - 1) {
        return {surfaceCoords, false};
    }

    int heightLeft = -1, heightMid = -1, heightRight = -1;

    for (int y = 0; y < rows; ++y) {
        if (heightLeft == -1 && grid[y][x - 1] != 0) heightLeft = y - 1;
        if (heightMid == -1 && grid[y][x] != 0) heightMid = y - 1;
        if (heightRight == -1 && grid[y][x + 1] != 0) heightRight = y - 1;
    }

    if (heightLeft == -1) heightLeft = rows - 1;
    if (heightMid == -1) heightMid = rows - 1;
    if (heightRight == -1) heightRight = rows - 1;

    heightLeft = std::clamp(heightLeft, 0, rows - 1);
    heightMid = std::clamp(heightMid, 0, rows - 1);
    heightRight = std::clamp(heightRight, 0, rows - 1);

    surfaceCoords.push_back({x - 1, heightLeft});
    surfaceCoords.push_back({x, heightMid});
    surfaceCoords.push_back({x + 1, heightRight});

    bool isFlat = (heightLeft == heightMid && heightMid == heightRight);

    return {surfaceCoords, isFlat};
}


void Board::clearBoard() {
    for (int y = 0; y < rows; ++y) {
        for (int x = 0; x < cols; ++x) {
            grid[y][x] = 0;
            colorGrid[y][x] = {0, 0, 0, 0};
        }
    }
}

void Board::finalizeLineClear() {
    if (!isClearingLines) return;

    std::vector<char> clear(rows, 0);
    for (int y : linesToClear) clear[y] = 1;

    int write = rows - 1;
    for (int read = rows - 1; read >= 0; --read) {
        if (!clear[read]) {
            if (write != read) {
                grid[write]      = std::move(grid[read]);
                colorGrid[write] = std::move(colorGrid[read]);
            }
            --write;
        }
    }
    for (; write >= 0; --write) {
        grid[write].assign(cols, 0);
        colorGrid[write].assign(cols, SDL_Color{0,0,0,0});
    }

    isClearingLines = false;
    linesToClear.clear();
    clearStartTime = 0;
}


void Board::updateLandingAnimations() {
    Uint32 now = SDL_GetTicks();
    landingAnims.erase(
        std::remove_if(landingAnims.begin(), landingAnims.end(),
            [now](const LandingAnim& a) {
                return now - a.startTime > (FADE_OUT_MS + FADE_IN_MS);
            }),
        landingAnims.end());
}

void Board::triggerHardDropAnim(const Shape& shape) {
    Uint32 now = SDL_GetTicks();
    std::unordered_map<int, int> topRows;
    
    for (const auto& coord : shape.getCoords()) {
        int col = coord.first;
        if (topRows.find(col) == topRows.end() || coord.second < topRows[col]) {
            topRows[col] = coord.second;
        }
    }
    
    for (const auto& [col, row] : topRows) {
        hardDropAnims.push_back({col, 0, row, now});

        const int maxSpan = std::max(row, 1);
        const int denom   = maxSpan * 100;

        if (denom > 0) {
            std::uniform_int_distribution<int> fyInt(0, denom - 1);
            std::uniform_int_distribution<int> vyInt(0, 29);
            for (int i = 0; i < 5; ++i) {
                float fx = col + 0.5f;
                float fy = fyInt(rng) / 100.0f;
                float vx = 0.0f;
                float vy = -0.05f - (vyInt(rng) / 300.0f);
                bubbleParticles.push_back({fx, fy, vx, vy, 255, now});
            }
        }
    }
}

void Board::updateHardDropAnimations() {
    Uint32 now = SDL_GetTicks();
    auto it = hardDropAnims.begin();
    while (it != hardDropAnims.end()) {
        if (now - it->startTime > HARD_DROP_ANIM_DURATION) {
            it = hardDropAnims.erase(it);
        } else {
            ++it;
        }
    }
}

void Board::updateBubbleParticles() {
    Uint32 now = SDL_GetTicks();
    bubbleParticles.erase(
        std::remove_if(bubbleParticles.begin(), bubbleParticles.end(),
            [now](const BubbleParticle& p) {
                return now - p.startTime > 600;
            }),
        bubbleParticles.end()
    );

    for (auto& p : bubbleParticles) {
        p.x += p.vx;
        p.y += p.vy;
        float lifeRatio = (now - p.startTime) / 600.0f;
        p.alpha = Uint8(255 * (1.0f - lifeRatio * lifeRatio));
    }
}

void Board::updateAnimations() {
    updateLandingAnimations();
    updateHardDropAnimations();
    updateBubbleParticles();
}

bool Board::isCellReachable(int x, int y) const noexcept {
    if (y < 0) return true;
    
    for (int i = y - 1; i >= 0; i--) {
        if (grid[i][x] != 0) {
            return false;
        }
    }
    return true;
}

void Board::rebuildGridBackground(SDL_Renderer* renderer) {
    if (gridBgTex) {
        SDL_DestroyTexture(gridBgTex);
        gridBgTex = nullptr;
    }

    const int boardWidth  = cols * cellSize;
    const int boardHeight = rows * cellSize;
    const int gridGap = 1;

    gridBgTex = SDL_CreateTexture(
        renderer,
        SDL_PIXELFORMAT_RGBA8888,
        SDL_TEXTUREACCESS_TARGET,
        boardWidth,
        boardHeight
    );
    if (!gridBgTex) {
        SDL_Log("Failed to create gridBgTex: %s", SDL_GetError());
        return;
    }

    SDL_SetTextureBlendMode(gridBgTex, SDL_BLENDMODE_BLEND);

    SDL_SetRenderTarget(renderer, gridBgTex);

    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
    SDL_RenderClear(renderer);

    draw_smooth_rounded_rect(
        renderer,
        0, 0,
        boardWidth, boardHeight,
        5,
        SDL_Color{50, 50, 50, 255},
        true
    );
    for (int y = 0; y < rows; ++y) {
        for (int x = 0; x < cols; ++x) {
            const int cellX = x * cellSize + gridGap;
            const int cellY = y * cellSize + gridGap;
            const int cellDrawSize = cellSize - 2 * gridGap;
            draw_smooth_rounded_rect(
                renderer,
                cellX, cellY,
                cellDrawSize, cellDrawSize,
                2,
                SDL_Color{0, 0, 0, 255},
                true
            );
        }
    }

    SDL_SetRenderTarget(renderer, nullptr);
}

void Board::clearTileTextures() {
    for (auto& kv : tileTexByColor) {
        if (kv.second) SDL_DestroyTexture(kv.second);
    }
    tileTexByColor.clear();
}

SDL_Texture* Board::getTileTexture(SDL_Renderer* r, SDL_Color base) const {
    uint32_t key = packColor(base);
    if (auto it = tileTexByColor.find(key); it != tileTexByColor.end())
        return it->second;

    const int gridGap = 1;
    const int w = cellSize - 2 * gridGap;
    const int h = cellSize - 2 * gridGap;
    if (w <= 0 || h <= 0) return nullptr;

    SDL_Texture* tex = SDL_CreateTexture(r, SDL_PIXELFORMAT_RGBA8888,
                                         SDL_TEXTUREACCESS_TARGET, w, h);
    if (!tex) return nullptr;
    SDL_SetTextureBlendMode(tex, SDL_BLENDMODE_BLEND);

    SDL_SetRenderTarget(r, tex);
    SDL_SetRenderDrawColor(r, 0,0,0,0);
    SDL_RenderClear(r);

    SDL_Color border = darker(base, 0.55f);
    draw_tetris_cell(r, 0, 0, w, h, 6, 1, 2,
                     base, border);
    draw_smooth_parabolic_highlight_arc(r, 0, 0, w, h, 1, 2);

    SDL_SetRenderTarget(r, nullptr);

    tileTexByColor.emplace(key, tex);
    return tex;
}

void Board::prewarm(SDL_Renderer* r) {
    initializeTexture(r);
    rebuildGridBackground(r);

    const SDL_Color pieceColors[] = {
        {0,255,255,255},
        {255,255,0,255},
        {128,0,128,255},
        {0,255,0,255},
        {255,0,0,255},
        {0,0,255,255},
        {255,165,0,255}
    };
    for (auto c : pieceColors) {
        (void)getTileTexture(r, c);
    }
}

// --- Board.hpp ---
#pragma once

#include <SDL2/SDL.h>
#include <string>
#include <utility>
#include <vector>
#include <cmath>
#include <random>
#include <unordered_map>
#include <cstdint>

#include "Shape.hpp"

class Board {
public:
    static constexpr Uint32 FADE_OUT_MS             = 200;
    static constexpr Uint32 FADE_IN_MS              = 100;
    static constexpr Uint32 HARD_DROP_ANIM_DURATION = 300;

    struct LandingAnim {
        int    x;
        int    y;
        Uint32 startTime;
    };

    struct HardDropAnim {
        int    col;
        int    startRow;
        int    endRow;
        Uint32 startTime;
    };

    struct BubbleParticle {
        float  x, y;
        float  vx, vy;
        Uint8  alpha;
        Uint32 startTime;
    };

    Board(int rows, int cols, int cellSize, SDL_Color backgroundColor, uint32_t seed = std::random_device{}());
    ~Board();

    void initializeTexture(SDL_Renderer* renderer);
    void draw(SDL_Renderer* renderer, int offsetX, int offsetY, bool showPlacedBlocks) const;

    bool  isOccupied(const std::vector<std::pair<int, int>>& coords, int dx, int dy) const noexcept;
    void  placeShape(const Shape& shape);
    int   clearFullLines();
    void  finalizeLineClear();
    void  clearBoard();
    Uint8 landingAlpha(int x, int y, Uint32 now) const noexcept;
    bool  isCellReachable(int x, int y) const noexcept;

    void updateAnimations();
    void updateLandingAnimations();
    void updateHardDropAnimations();
    void updateBubbleParticles();
    void triggerHardDropAnim(const Shape& shape);

    void rebuildGridBackground(SDL_Renderer* renderer);

    void prewarm(SDL_Renderer* r);

    int  getRows() const noexcept;
    int  getCols() const noexcept;
    int  getCellSize() const noexcept;
    const std::vector<std::vector<int>>& getGrid() const noexcept;
    const std::vector<int>&              getLinesToClear() const noexcept;

    int  countFullLines() const;
    int  countHoles() const;
    std::pair<std::vector<std::pair<int, int>>, bool>
         getSurfaceCoordsAndFlatStatus(int x) const;

    bool                         isClearingLines      = false;
    int                          clearAnimationFrame  = 0;
    mutable Uint32               clearStartTime       = 0;
    mutable SDL_Texture*         whiteCellTexture     = nullptr;
    std::vector<LandingAnim>     landingAnims;

private:
    int       rows;
    int       cols;
    int       cellSize;
    SDL_Color backgroundColor;

    std::vector<std::vector<int>>       grid;
    std::vector<std::vector<SDL_Color>> colorGrid;
    std::vector<int>                    linesToClear;

    std::vector<HardDropAnim>   hardDropAnims;
    std::vector<BubbleParticle> bubbleParticles;

    std::mt19937 rng;

    mutable SDL_Texture* gridBgTex = nullptr;

    mutable std::unordered_map<uint32_t, SDL_Texture*> tileTexByColor{};
    void clearTileTextures();
    SDL_Texture* getTileTexture(SDL_Renderer* r, SDL_Color base) const;
    static uint32_t packColor(SDL_Color c) noexcept {
        return (uint32_t(c.r) << 24) | (uint32_t(c.g) << 16) | (uint32_t(c.b) << 8) | uint32_t(c.a);
    }

    static float easeOutCubic(float t) {
        return 1.0f - std::pow(1.0f - t, 3.0f);
    }
    static float easeInOutQuad(float t) {
        return (t < 0.5f)
                 ? (2.0f * t * t)
                 : (1.0f - std::pow(-2.0f * t + 2.0f, 2.0f) * 0.5f);
    }
    static float clamp01(float v)     { return v < 0.f ? 0.f : (v > 1.f ? 1.f : v); }
    static float easeOutQuad(float t) { return 1.f - (1.f - t) * (1.f - t); }

    static float popupScale(float t) {
        const float grow   = 0.30f;
        const float hold   = 0.15f;
        const float settle = 0.55f;
        const float s0     = 0.65f;
        const float sOver  = 1.25f;
        const float sEnd   = 1.0f;

        if (t < grow) {
            const float p = t / grow;
            return s0 + (sOver - s0) * easeOutCubic(p);
        } else if (t < grow + hold) {
            return sOver;
        } else {
            float p = (t - (grow + hold)) / settle;
            if (p > 1.f) p = 1.f;
            return sOver + (sEnd - sOver) * easeInOutQuad(p);
        }
    }
};


// --- DrawUtils.cpp ---
#include "DrawUtils.hpp"

void drawAACircle(SDL_Renderer* renderer, int cx, int cy, int radius, SDL_Color color) {
    if (radius <= 0) return;

    SDL_BlendMode prev;
    SDL_GetRenderDrawBlendMode(renderer, &prev);
    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);

    const Uint8 baseR = color.r, baseG = color.g, baseB = color.b, baseA = color.a;

    for (int dy = -radius; dy <= radius; ++dy) {
        for (int dx = -radius; dx <= radius; ++dx) {
            float d = std::sqrt(float(dx*dx + dy*dy));
            if (d <= radius) {
                float edge = radius - d;
                float aFrac = std::clamp(edge, 0.0f, 1.0f);
                Uint8 a = static_cast<Uint8>(baseA * aFrac);
                if (a == 0) continue;
                SDL_SetRenderDrawColor(renderer, baseR, baseG, baseB, a);
                SDL_RenderDrawPoint(renderer, cx + dx, cy + dy);
            }
        }
    }
    SDL_SetRenderDrawBlendMode(renderer, prev);
}

void drawUIMenuRoundedRect(SDL_Renderer* renderer, int x, int y, int w, int h,
                           int radius, SDL_Color color, Uint8 alpha) {
    if (w <= 0 || h <= 0) return;
    radius = std::min(radius, std::min(w, h) / 2);
    SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, alpha);

    SDL_Rect center = { x + radius, y + radius, w - 2 * radius, h - 2 * radius };
    SDL_RenderFillRect(renderer, &center);

    SDL_Rect top    = { x + radius, y, w - 2 * radius, radius };
    SDL_Rect bottom = { x + radius, y + h - radius, w - 2 * radius, radius };
    SDL_Rect left   = { x, y + radius, radius, h - 2 * radius };
    SDL_Rect right  = { x + w - radius, y + radius, radius, h - 2 * radius };
    SDL_RenderFillRect(renderer, &top);
    SDL_RenderFillRect(renderer, &bottom);
    SDL_RenderFillRect(renderer, &left);
    SDL_RenderFillRect(renderer, &right);

    for (int dy = 0; dy < radius; ++dy) {
        for (int dx = 0; dx < radius; ++dx) {
            if (dx*dx + dy*dy <= radius*radius) {
                SDL_RenderDrawPoint(renderer, x + radius - dx - 1, y + radius - dy - 1);
                SDL_RenderDrawPoint(renderer, x + w - radius + dx, y + radius - dy - 1);
                SDL_RenderDrawPoint(renderer, x + radius - dx - 1, y + h - radius + dy);
                SDL_RenderDrawPoint(renderer, x + w - radius + dx, y + h - radius + dy);
            }
        }
    }
}

void drawCardWithBorder(SDL_Renderer* renderer,
                        int x, int y, int w, int h,
                        int radius,
                        SDL_Color bgColor,
                        SDL_Color borderColor,
                        int borderThickness = 2) {
    draw_smooth_rounded_rect(
        renderer,
        x, y,
        w, h,
        radius,
        borderColor,
        false,
        borderThickness
    );

    draw_smooth_rounded_rect(
        renderer,
        x + borderThickness,
        y + borderThickness,
        w - 2 * borderThickness,
        h - 2 * borderThickness,
        std::max(0, radius - borderThickness),
        bgColor,
        true
    );
}

void draw_smooth_rounded_rect(SDL_Renderer* renderer,
                              int x, int y, int w, int h,
                              int radius, SDL_Color color,
                              bool filled, int borderThickness) {
    SDL_BlendMode original_mode;
    SDL_GetRenderDrawBlendMode(renderer, &original_mode);
    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);

    SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);

    if (filled) {
        SDL_Rect center = {x + radius, y, w - 2 * radius, h};
        SDL_RenderFillRect(renderer, &center);

        SDL_Rect sides = {x, y + radius, w, h - 2 * radius};
        SDL_RenderFillRect(renderer, &sides);
    }

    const int centers[4][2] = {
        {x + radius, y + radius},
        {x + w - radius, y + radius},
        {x + radius, y + h - radius},
        {x + w - radius, y + h - radius}
    };

    for (int corner = 0; corner < 4; corner++) {
        int cx = centers[corner][0];
        int cy = centers[corner][1];

        int start_x = (corner % 2 == 0) ? x : x + w - radius;
        int end_x   = (corner % 2 == 0) ? x + radius : x + w;

        int start_y = (corner < 2) ? y : y + h - radius;
        int end_y   = (corner < 2) ? y + radius : y + h;

        for (int py = start_y; py < end_y; py++) {
            for (int px = start_x; px < end_x; px++) {
                float dx = px - cx + 0.5f;
                float dy = py - cy + 0.5f;
                float distance = sqrtf(dx * dx + dy * dy);

                if (filled) {
                    if (distance <= radius - 0.5f) {
                        SDL_RenderDrawPoint(renderer, px, py);
                    } else if (distance < radius + 0.5f) {
                        Uint8 alpha = (Uint8)(color.a * (1.0f - (distance - (radius - 0.5f))));
                        SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, alpha);
                        SDL_RenderDrawPoint(renderer, px, py);
                        SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
                    }
                } else {
                    if (distance >= radius - borderThickness && distance <= radius + 0.5f) {
                        SDL_RenderDrawPoint(renderer, px, py);
                    }
                }
            }
        }
    }

    if (!filled) {
        for (int i = 0; i < borderThickness; i++) {
            SDL_RenderDrawLine(renderer, x + radius, y + i, x + w - radius - 1, y + i);
            SDL_RenderDrawLine(renderer, x + radius, y + h - 1 - i, x + w - radius - 1, y + h - 1 - i);

            SDL_RenderDrawLine(renderer, x + i, y + radius, x + i, y + h - radius - 1);
            SDL_RenderDrawLine(renderer, x + w - 1 - i, y + radius, x + w - 1 - i, y + h - radius - 1);
        }
    }

    SDL_SetRenderDrawBlendMode(renderer, original_mode);
}

SDL_Color darker(SDL_Color c, float factor) noexcept {
    SDL_Color out;
    out.r = Uint8(c.r * factor);
    out.g = Uint8(c.g * factor);
    out.b = Uint8(c.b * factor);
    out.a = c.a;
    return out;
}

template <typename PixelFunc>
void draw_rounded_corners(int x, int y, int w, int h, int radius, PixelFunc&& pixelFunc) {
    const int centers[4][2] = {
        {x + radius, y + radius},
        {x + w - radius, y + radius},
        {x + radius, y + h - radius},
        {x + w - radius, y + h - radius}
    };

    for (int corner = 0; corner < 4; corner++) {
        int cx = centers[corner][0];
        int cy = centers[corner][1];
        int start_x = (corner % 2 == 0) ? x : x + w - radius;
        int end_x = (corner % 2 == 0) ? x + radius : x + w;
        int start_y = (corner < 2) ? y : y + h - radius;
        int end_y = (corner < 2) ? y + radius : y + h;
        for (int py = start_y; py < end_y; py++) {
            for (int px = start_x; px < end_x; px++) {
                float dx = px - cx + 0.5f;
                float dy = py - cy + 0.5f;
                float dist = std::sqrt(dx * dx + dy * dy);
                if (dist <= radius - 0.5f)
                    pixelFunc(px, py, 1.0f);
                else if (dist < radius + 0.5f)
                    pixelFunc(px, py, 1.0f - (dist - (radius - 0.5f)));
            }
        }
    }
}

void fill_solid_rounded_rect(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, SDL_Color color) {
    SDLBlendGuard _guard(renderer);
    SDL_Rect center = {x + radius, y, w - 2 * radius, h};
    SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
    SDL_RenderFillRect(renderer, &center);
    SDL_Rect side = {x, y + radius, w, h - 2 * radius};
    SDL_RenderFillRect(renderer, &side);

    draw_rounded_corners(x, y, w, h, radius, [&](int px, int py, float alpha_frac) {
        Uint8 alpha = (Uint8)(color.a * alpha_frac);
        SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, alpha);
        SDL_RenderDrawPoint(renderer, px, py);
    });
}

inline void compute_gradient_color(int px, int py, int centerX, int centerY, float maxDistance,
                                  const SDL_Color& start, const SDL_Color& end,
                                  Uint8& r, Uint8& g, Uint8& b) {
    float dx = px - centerX;
    float dy = py - centerY;
    float distance = std::sqrt(dx * dx + dy * dy);
    float ratio = distance / maxDistance;
    if (ratio > 1.0f) ratio = 1.0f;
    r = static_cast<Uint8>(start.r * (1 - ratio) + end.r * ratio);
    g = static_cast<Uint8>(start.g * (1 - ratio) + end.g * ratio);
    b = static_cast<Uint8>(start.b * (1 - ratio) + end.b * ratio);
}

void fill_gradient_rounded_rect(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, SDL_Color color) {
    SDLBlendGuard _guard(renderer);

    SDL_Color centerColor = { 
        Uint8(255 - (255 - color.r) / 2), 
        Uint8(255 - (255 - color.g) / 2), 
        Uint8(255 - (255 - color.b) / 2), 
        color.a 
    };

    int centerX = x + w / 2;
    int centerY = y + h;
    float maxDistance = std::sqrt((w / 2.0f) * (w / 2.0f) + h * h);

    for (int py = y; py < y + h; py++)
        for (int px = x + radius; px < x + w - radius; px++) {
            Uint8 r, g, b;
            compute_gradient_color(px, py, centerX, centerY, maxDistance, centerColor, color, r, g, b);
            SDL_SetRenderDrawColor(renderer, r, g, b, 255);
            SDL_RenderDrawPoint(renderer, px, py);
        }
    for (int py = y + radius; py < y + h - radius; py++) {
        for (int px = x; px < x + radius; px++) {
            Uint8 r, g, b;
            compute_gradient_color(px, py, centerX, centerY, maxDistance, centerColor, color, r, g, b);
            SDL_SetRenderDrawColor(renderer, r, g, b, 255);
            SDL_RenderDrawPoint(renderer, px, py);
        }
        for (int px = x + w - radius; px < x + w; px++) {
            Uint8 r, g, b;
            compute_gradient_color(px, py, centerX, centerY, maxDistance, centerColor, color, r, g, b);
            SDL_SetRenderDrawColor(renderer, r, g, b, 255);
            SDL_RenderDrawPoint(renderer, px, py);
        }
    }
    draw_rounded_corners(x, y, w, h, radius, [&](int px, int py, float alpha_frac) {
        Uint8 r, g, b;
        compute_gradient_color(px, py, centerX, centerY, maxDistance, centerColor, color, r, g, b);
        SDL_SetRenderDrawColor(renderer, r, g, b, (Uint8)(255 * alpha_frac));
        SDL_RenderDrawPoint(renderer, px, py);
    });
}

void draw_rounded_rect_border(SDL_Renderer* renderer, int x, int y, int w, int h,
                              int radius, int borderThickness, SDL_Color color) {
    SDLBlendGuard _guard(renderer);
    int innerRadius = radius - borderThickness;
    draw_rounded_corners(x, y, w, h, radius, [&](int px, int py, float alpha_frac) {
        float dx, dy, dist;
        int cx = (px < x + w/2) ? x + radius : x + w - radius;
        int cy = (py < y + h/2) ? y + radius : y + h - radius;
        dx = px - cx + 0.5f; dy = py - cy + 0.5f;
        dist = std::sqrt(dx*dx + dy*dy);
        if (dist < innerRadius - 0.5f)
            return;
        float blend = alpha_frac;
        if (dist < innerRadius + 0.5f)
            blend *= 1.0f - ((innerRadius + 0.5f) - dist);
        SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, (Uint8)(color.a * blend));
        SDL_RenderDrawPoint(renderer, px, py);
    });
    for (int py = y + radius; py < y + h - radius; py++) {
        for (int i = 0; i < borderThickness; i++) {
            SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
            SDL_RenderDrawPoint(renderer, x + i, py);
            SDL_RenderDrawPoint(renderer, x + w - 1 - i, py);
        }
    }
    for (int px = x + radius; px < x + w - radius; px++) {
        for (int i = 0; i < borderThickness; i++) {
            SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
            SDL_RenderDrawPoint(renderer, px, y + i);
            SDL_RenderDrawPoint(renderer, px, y + h - 1 - i);
        }
    }
}

void draw_tetris_cell(SDL_Renderer* renderer,
                      int x, int y, int w, int h,
                      int radius, int margin, int borderThickness,
                      SDL_Color outerColor, SDL_Color borderColor) {
    fill_solid_rounded_rect(renderer, x, y, w, h, radius, outerColor);

    int borderX = x + margin;
    int borderY = y + margin;
    int borderW = w - 2 * margin;
    int borderH = h - 2 * margin;
    int borderRadius = radius - margin;

    int gradX = borderX + borderThickness;
    int gradY = borderY + borderThickness;
    int gradW = borderW - 2 * borderThickness;
    int gradH = borderH - 2 * borderThickness;
    int gradRadius = borderRadius - borderThickness;

    if (borderW > 0 && borderH > 0 && borderRadius > 0 && borderThickness > 0)
        draw_rounded_rect_border(renderer, borderX, borderY, borderW, borderH, borderRadius, borderThickness, borderColor);

    if (gradW > 0 && gradH > 0 && gradRadius > 0)
        fill_gradient_rounded_rect(renderer, gradX, gradY, gradW, gradH, gradRadius, outerColor);
}

void draw_smooth_parabolic_highlight_arc(SDL_Renderer* renderer,
                                         int x, int y, int w, int h,
                                         int margin, int borderThickness) {
    int gradX = x + margin + borderThickness;
    int gradY = y + margin + borderThickness;
    int gradW = w - 2 * (margin + borderThickness);
    int gradH = h - 2 * (margin + borderThickness);

    if (gradW <= 0 || gradH <= 0) return;

    int topY = gradY;
    int arcBottomY = gradY + gradH / 4;
    int arcCenterX = gradX + gradW / 2;

    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);
    int thickness = std::max(2, gradH / 18);

    float fadeTopY = static_cast<float>(topY);
    float fadeBottomY = static_cast<float>(arcBottomY);

    for (int py = topY; py <= arcBottomY; py++) {
        float t = static_cast<float>(py - topY) / (arcBottomY - topY);
        float halfWidth = (gradW / 2.0f) * (1.0f - t * t);
        
        float vFade = 1.0f;
        float pixelCenterY = py + 0.5f;
        float dTop = pixelCenterY - fadeTopY;
        float dBottom = fadeBottomY - pixelCenterY;
        vFade = std::min(dTop, dBottom);
        vFade = std::clamp(vFade, 0.0f, 1.0f);
        
        int leftBound = static_cast<int>(arcCenterX - halfWidth - thickness);
        int rightBound = static_cast<int>(arcCenterX + halfWidth + thickness);
        
        for (int px = leftBound; px <= rightBound; px++) {
            float dx = static_cast<float>(px) + 0.5f - arcCenterX;
            float horizontalDist = std::abs(dx) - halfWidth;
            float dist = std::max(0.0f, horizontalDist);
            
            float alpha_factor = 0.0f;
            if (dist < thickness) {
                alpha_factor = 1.0f;
                if (dist > thickness - 1.0f) {
                    alpha_factor = 1.0f - (dist - (thickness - 1.0f));
                }
                alpha_factor *= vFade;
                
                Uint8 alpha = static_cast<Uint8>(128 * alpha_factor);
                if (alpha > 0) {
                    SDL_SetRenderDrawColor(renderer, 255, 255, 255, alpha);
                    SDL_RenderDrawPoint(renderer, px, py);
                }
            }
        }
    }
}

void draw_preview_block(SDL_Renderer* r,
                               int x, int y, int w, int h,
                               SDL_Color baseCol) {
    SDL_Color borderCol = darker(baseCol, 0.55f);
    constexpr int radius          = 4;
    constexpr int margin          = 1;
    constexpr int borderThickness = 2;

    draw_tetris_cell(r, x, y, w, h,
                     radius, margin, borderThickness,
                     baseCol, borderCol);

    draw_smooth_parabolic_highlight_arc(r, x, y, w, h,
                                        margin, borderThickness);
}

// --- DrawUtils.hpp ---
#pragma once
#include <SDL2/SDL.h>
#include <cmath>
#include <algorithm>
#include <functional>

struct SDLBlendGuard {
    SDL_Renderer* renderer;
    SDL_BlendMode oldMode;
    SDLBlendGuard(SDL_Renderer* r) : renderer(r) {
        SDL_GetRenderDrawBlendMode(renderer, &oldMode);
        SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);
    }
    ~SDLBlendGuard() {
        SDL_SetRenderDrawBlendMode(renderer, oldMode);
    }
};

void drawAACircle(SDL_Renderer* renderer, int cx, int cy, int radius, SDL_Color color);
void drawUIMenuRoundedRect(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, SDL_Color color, Uint8 alpha);
void drawCardWithBorder(SDL_Renderer* renderer,int x, int y, int w, int h, int radius, SDL_Color bgColor, SDL_Color borderColor, int borderThickness);
void draw_smooth_rounded_rect(SDL_Renderer* renderer,int x, int y, int w, int h,int radius, SDL_Color color,bool filled = true, int borderThickness = 1);
SDL_Color darker(SDL_Color c, float factor = 0.55f) noexcept;
void draw_rounded_corners(int x, int y, int w, int h, int radius,
                          std::function<void(int, int, float)> pixelFunc);
void fill_solid_rounded_rect(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, SDL_Color color);
void fill_gradient_rounded_rect(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, SDL_Color color);
void draw_rounded_rect_border(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, int borderThickness, SDL_Color color);
void draw_tetris_cell(SDL_Renderer* renderer, int x, int y, int w, int h, int radius, int margin, int borderThickness, SDL_Color outerColor, SDL_Color borderColor);
void draw_smooth_parabolic_highlight_arc(SDL_Renderer* renderer, int x, int y, int w, int h, int margin, int borderThickness);
void draw_preview_block(SDL_Renderer* r,
                               int x, int y, int w, int h,
                               SDL_Color baseCol);

// --- Game.cpp ---
#include "Game.hpp"
#include <array>

namespace {
struct CoordsKey {
    std::array<int, 8> a{};
    bool operator==(const CoordsKey& o) const noexcept { return a == o.a; }
};

inline CoordsKey makeKey(const Shape& s) {
    std::array<std::pair<int,int>, 4> pts;
    int i=0;
    for (auto p : s.getCoords()) pts[i++] = p;
    std::sort(pts.begin(), pts.end(), [](auto& L, auto& R){
        if (L.second != R.second) return L.second < R.second;
        return L.first < R.first;
    });
    CoordsKey k;
    int j=0;
    for (auto& p : pts) { k.a[j++] = p.first; k.a[j++] = p.second; }
    return k;
}
struct KeyHash {
    size_t operator()(const CoordsKey& k) const noexcept {
        size_t h = 1469598103934665603ull;
        for (int v : k.a) { h ^= std::hash<int>{}(v); h *= 1099511628211ull; }
        return h;
    }
};
}

Game::Game(int windowWidth, int windowHeight, int cellSize, std::optional<uint32_t> seed)
    : board(20, 10, cellSize, {0, 0, 255, 255}, seed.has_value() ? (*seed ^ 0x9E3779B9u) : std::random_device{}()),
      currentShape(Shape::Type::O, board.getCols() / 2, 0, {255, 255, 255, 255}),
      shadowShape(currentShape),
      cellSize(cellSize),
      windowWidth(windowWidth),
      windowHeight(windowHeight),
      rng(seed.has_value() ? std::mt19937(*seed) : std::mt19937(std::random_device{}())) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
        throw std::runtime_error("SDL Initialization failed");

    int imgFlags = IMG_INIT_PNG;
    if ((IMG_Init(imgFlags) & imgFlags) != imgFlags)
        throw std::runtime_error(std::string("IMG_Init failed: ") + IMG_GetError());

    if (TTF_Init() == -1)
        throw std::runtime_error("Failed to initialize SDL_ttf: " + std::string(TTF_GetError()));

    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0)
        throw std::runtime_error("SDL_mixer initialization failed: " + std::string(Mix_GetError()));

    fontDefault = TTF_OpenFont("fonts/DejaVuSans.ttf", 32);
    if (!fontDefault) throw std::runtime_error("Failed to load font: " + std::string(TTF_GetError()));

    fontLarge = TTF_OpenFont("fonts/DejaVuSans-Bold.ttf", 80);
    if (!fontLarge) fontLarge = fontDefault;

    fontMedium = TTF_OpenFont("fonts/DejaVuSans-Bold.ttf", 24);
    if (!fontMedium) fontMedium = fontDefault;

    fontSmall = TTF_OpenFont("fonts/OpenSans-Regular.ttf", 10);
    if (!fontSmall) fontSmall = fontDefault;

    window = SDL_CreateWindow(
        "Tetris",
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        windowWidth,
        windowHeight,
        SDL_WINDOW_SHOWN
    );
    if (!window) {
        throw std::runtime_error("Failed to create window");
    }

    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1");

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);

    if (!renderer) {
        throw std::runtime_error("Failed to create renderer");
    }
    
    board.initializeTexture(renderer);
    board.rebuildGridBackground(renderer);
    board.prewarm(renderer);
    warmupOnce();
    scorePopups.reserve(16);

    backgroundTexture = IMG_LoadTexture(renderer, "assets/background.png");
    if (!backgroundTexture) {
        throw std::runtime_error("Failed to load background image");
    }

    FormUI::Init(fontDefault);

    newGameBtn = FormUI::Button(
        "New Game",
        windowWidth / 2 - 100,
        windowHeight / 2 - 60,
        200,
        50,
        [this]() {
            resetGame();
            isPaused = false;
        }
    );

    quitBtn = FormUI::Button(
        "Quit",
        windowWidth / 2 - 100,
        windowHeight / 2 + 60,
        200,
        50,
        [this]() {
            running = false;
        }
    );

    resumeBtn = FormUI::Button(
        "Resume",
        windowWidth / 2 - 100,
        windowHeight / 2 - 120,
        200,
        50,
        [this]() {
            isPaused = false;
            resumeCountdownActive = true;
            countdownStartTime = SDL_GetTicks();
        }
    );

    settingsBtn = FormUI::Button(
        "Settings",
        windowWidth / 2 - 100,
        windowHeight / 2,
        200,
        50,
        [this]() {
            currentScreen = Screen::Settings;
        }
    );

    mouseControlCheckbox = FormUI::Checkbox(
        "Enable Mouse Control",
        windowWidth / 2 - 150,
        150,
        300,
        30,
        &mouseControlEnabled,
        fontSmall
    );
    mouseControlCheckbox->visible = false;

    soundEnabled = false;
    lastSoundEnabled = soundEnabled;
    soundCheckbox = FormUI::Checkbox(
        "Enable Sound",
        windowWidth / 2 - 150,
        200,
        300,
        30,
        &soundEnabled,
        fontSmall
    );
    soundCheckbox->visible = false;

    gameOverNewGameBtn = FormUI::Button(
        "New Game",
        windowWidth / 2 - 100,
        windowHeight / 2 - 60,
        200,
        50,
        [this]() {
            resetGame();
        }
    );
    
    gameOverQuitBtn = FormUI::Button(
        "Quit",
        windowWidth / 2 - 100,
        windowHeight / 2 + 10,
        200,
        50,
        [this]() {
            running = false; 
        }
    );
    gameOverNewGameBtn->visible = false;
    gameOverQuitBtn->visible = false;

    FormUI::Layout layout(windowWidth / 2 - 150, 250, 10);

    keyBindings = {
        {Action::MoveRight, SDLK_RIGHT},
        {Action::MoveLeft, SDLK_LEFT},
        {Action::RotateRight, SDLK_UP},
        {Action::RotateLeft, SDLK_z},
        {Action::SoftDrop, SDLK_DOWN},
        {Action::HardDrop, SDLK_SPACE},
        {Action::Hold, SDLK_c}
    };

    auto keyToString = [](SDL_Keycode key) {
        return SDL_GetKeyName(key);
    };
    
    controlMappings = {
        {"MOVE RIGHT", Action::MoveRight},
        {"MOVE LEFT", Action::MoveLeft},
        {"ROTATE RIGHT", Action::RotateRight},
        {"ROTATE LEFT", Action::RotateLeft},
        {"SOFT DROP", Action::SoftDrop},
        {"HARD DROP", Action::HardDrop},
        {"HOLD", Action::Hold}
    };
    
    for (size_t i = 0; i < controlMappings.size(); ++i) {
        const auto& [labelText, action] = controlMappings[i];
        std::string keyLabel = keyToString(keyBindings[action]);
    
        auto buttonCallback = [this, action, i]() {
            waitingForKey = true;
            actionToRebind = action;
            controlButtons[i]->setText("Press a key...");
        };
    
        auto [label, button] = layout.addLabelButtonRow(labelText, keyLabel, buttonCallback, 200, 100, 30, fontSmall, fontSmall);
        label->visible = false;
        button->visible = false;
        controlLabels.push_back(label);
        controlButtons.push_back(button);
    }

    resetControlsBtn = FormUI::Button(
        "Reset Controls",
        windowWidth / 2 + 50,
        windowHeight - 300,
        150,
        40,
        [this]() {
            keyBindings = {
                {Action::MoveRight, SDLK_RIGHT},
                {Action::MoveLeft, SDLK_LEFT},
                {Action::RotateRight, SDLK_UP},
                {Action::RotateLeft, SDLK_z},
                {Action::SoftDrop, SDLK_DOWN},
                {Action::HardDrop, SDLK_SPACE},
                {Action::Hold, SDLK_c}
            };
            for (size_t i = 0; i < controlButtons.size(); ++i) {
                controlButtons[i]->setText(SDL_GetKeyName(keyBindings[controlMappings[i].second]));
            }
        },
        fontSmall
    );
    resetControlsBtn->visible = false;

    doneBtn = FormUI::Button(
        "Done",
        windowWidth / 2 - 100,
        windowHeight - 100,
        200,
        40,
        [this]() { 
            currentScreen = Screen::Main;
            resetControlsBtn->visible = false;
            doneBtn->visible = false;
        },
        fontSmall
    );
    doneBtn->visible = false;

    spawnNewShape();
    for (int i = 0; i < 7; ++i) {
        Shape s(static_cast<Shape::Type>(i), board.getCols() / 2, 0, {255,255,255,255});
        computeReachableLocks(s);
    }
    resumeCountdownActive = true;
    countdownStartTime = SDL_GetTicks();
}

Game::~Game() {
    if (soundEnabled && Mix_PlayingMusic()) {
        SoundManager::StopBackgroundMusic();
        SoundManager::StopGameOverMusic();
    }

    if (backgroundTexture) SDL_DestroyTexture(backgroundTexture);

    SoundManager::CleanUp();
    Mix_CloseAudio();

    if (renderer) SDL_DestroyRenderer(renderer);
    if (window) SDL_DestroyWindow(window);
    
    if (fontLarge && fontLarge != fontDefault) {
        TTF_CloseFont(fontLarge);
    }
    if (fontMedium && fontMedium != fontDefault) {
        TTF_CloseFont(fontMedium);
    }
    if (fontSmall && fontSmall != fontDefault) {
        TTF_CloseFont(fontSmall);
    }
    if (fontDefault) {
        TTF_CloseFont(fontDefault);
    }

    IMG_Quit();
    TTF_Quit();
}

void Game::run() {
    while (running) {
        processInput();
        FormUI::Update();
        update();
        render();
    }
}

void Game::processInput() {
    mouseMovedThisFrame = false;
    if (soundEnabled != lastSoundEnabled) {
        if (soundEnabled) {
            SoundManager::Load();
            SoundManager::RestartBackgroundMusic();
            isMusicPlaying = true;
        } else {
            SoundManager::StopBackgroundMusic();
            isMusicPlaying = false;
        }
        lastSoundEnabled = soundEnabled;
    }
    inputHandler.beginFrame();

    if (board.isClearingLines) {
        SDL_Event e;
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT) {
                running = false;
            }
        }
        return;
    }

    SDL_Event e;
    while (SDL_PollEvent(&e)) {
        inputHandler.handleEvent(e);
        FormUI::HandleEvent(e);

        if (e.type == SDL_MOUSEMOTION) {
            mouseMovedThisFrame = true;
        }

        if (inputHandler.isQuitRequested()) {
            running = false;
            return;
        }

        if (currentScreen == Screen::Settings && e.type == SDL_KEYDOWN && !e.key.repeat) {
            if (waitingForKey) {
                SDL_Keycode newKey = e.key.keysym.sym;

                if (newKey == SDLK_ESCAPE) {
                    waitingForKey = false;
                    for (size_t i = 0; i < controlButtons.size(); ++i) {
                        if (controlMappings[i].second == actionToRebind) {
                            controlButtons[i]->setText(SDL_GetKeyName(keyBindings[actionToRebind]));
                        }
                    }
                    return;
                }

                bool keyAlreadyUsed = false;
                for (const auto& [action, boundKey] : keyBindings) {
                    if (boundKey == newKey && action != actionToRebind) {
                        keyAlreadyUsed = true;
                        break;
                    }
                }

                if (keyAlreadyUsed) {
                    waitingForKey = false;
                    for (size_t i = 0; i < controlButtons.size(); ++i) {
                        if (controlMappings[i].second == actionToRebind) {
                            controlButtons[i]->setText(SDL_GetKeyName(keyBindings[actionToRebind]));
                        }
                    }
                    return;
                }

                keyBindings[actionToRebind] = newKey;
                waitingForKey = false;

                for (size_t i = 0; i < controlButtons.size(); ++i) {
                    if (controlMappings[i].second == actionToRebind) {
                        controlButtons[i]->setText(SDL_GetKeyName(newKey));
                    }
                }
            } else {
                if (e.key.keysym.sym == SDLK_ESCAPE) {
                    currentScreen = Screen::Main;
                }
            }
        }
    }

    if (resumeCountdownActive) {
        return;
    }

    if (isPaused) {
        if (inputHandler.isKeyJustPressed(SDLK_ESCAPE)) {
            resumeCountdownActive = true;
            countdownStartTime = SDL_GetTicks();
            isPaused = false;
            inputHandler.clearKeyState(SDLK_ESCAPE);
            totalPausedTime += SDL_GetTicks() - pauseStartTime;
            if (!isMusicPlaying) {
                if (soundEnabled) SoundManager::ResumeBackgroundMusic();
                isMusicPlaying = true;
            }
        }
        return;
    }

    if (inputHandler.isKeyJustPressed(SDLK_ESCAPE)) {
        isPaused = true;
        pauseStartTime = SDL_GetTicks();
        inputHandler.clearKeyState(SDLK_ESCAPE);
        return;
    }

    if (isGameOver()) {
        if (inputHandler.isLeftMouseClicked() || inputHandler.isRightMouseClicked()) {
            if (ignoreNextMouseClick) {
                ignoreNextMouseClick = false;
            }
        }
        return;
    }

    Uint32 currentTime = SDL_GetTicks();
    auto clearPlannerOnKeyboard = [&](){ plannedMouseLock.reset(); };
    if (inputHandler.isKeyJustPressed(keyBindings[Action::MoveLeft])  ||
        inputHandler.isKeyJustPressed(keyBindings[Action::MoveRight]) ||
        inputHandler.isKeyJustPressed(keyBindings[Action::RotateLeft])||
        inputHandler.isKeyJustPressed(keyBindings[Action::RotateRight]))
    {
        clearPlannerOnKeyboard();
    }

    const Uint32 autoRepeatInitialDelay = 400;
    const Uint32 autoRepeatInterval = 100;

    static bool leftKeyHandled = false;
    static Uint32 leftLastMoveTime = 0;
    static bool leftFirstRepeat = true;

    if (inputHandler.isKeyPressed(keyBindings[Action::MoveLeft])) {
        if (!leftKeyHandled) {
            if (!board.isOccupied(currentShape.getCoords(), -1, 0)) {
                currentShape.moveLeft();
                if (soundEnabled) SoundManager::PlayMoveSound();
            }
            leftKeyHandled = true;
            leftLastMoveTime = currentTime;
            leftFirstRepeat = true;
        } else {
            if (leftFirstRepeat && currentTime - leftLastMoveTime >= autoRepeatInitialDelay) {
                if (!board.isOccupied(currentShape.getCoords(), -1, 0)) {
                    currentShape.moveLeft();
                    if (soundEnabled) SoundManager::PlayMoveSound();
                }
                leftLastMoveTime = currentTime;
                leftFirstRepeat = false;
            } else if (!leftFirstRepeat && currentTime - leftLastMoveTime >= autoRepeatInterval) {
                if (!board.isOccupied(currentShape.getCoords(), -1, 0)) {
                    currentShape.moveLeft();
                    if (soundEnabled) SoundManager::PlayMoveSound();
                }
                leftLastMoveTime = currentTime;
            }
        }
    } else {
        leftKeyHandled = false;
    }

    static bool rightKeyHandled = false;
    static Uint32 rightLastMoveTime = 0;
    static bool rightFirstRepeat = true;

    if (inputHandler.isKeyPressed(keyBindings[Action::MoveRight])) {
        if (!rightKeyHandled) {
            if (!board.isOccupied(currentShape.getCoords(), 1, 0)) {
                currentShape.moveRight(board.getCols());
                if (soundEnabled) SoundManager::PlayMoveSound();
            }
            rightKeyHandled = true;
            rightLastMoveTime = currentTime;
            rightFirstRepeat = true;
        } else {
            if (rightFirstRepeat && currentTime - rightLastMoveTime >= autoRepeatInitialDelay) {
                if (!board.isOccupied(currentShape.getCoords(), 1, 0)) {
                    currentShape.moveRight(board.getCols());
                    if (soundEnabled) SoundManager::PlayMoveSound();
                }
                rightLastMoveTime = currentTime;
                rightFirstRepeat = false;
            } else if (!rightFirstRepeat && currentTime - rightLastMoveTime >= autoRepeatInterval) {
                if (!board.isOccupied(currentShape.getCoords(), 1, 0)) {
                    currentShape.moveRight(board.getCols());
                    if (soundEnabled) SoundManager::PlayMoveSound();
                }
                rightLastMoveTime = currentTime;
            }
        }
    } else {
        rightKeyHandled = false;
    }

    {
        const int boardOffsetX = UI::BoardOffsetX;
        const int boardOffsetY = UI::BoardOffsetY;
        int mouseX = inputHandler.getMouseX() - boardOffsetX;
        int mouseY = inputHandler.getMouseY() - boardOffsetY;

        const bool insideBoard =
            mouseX >= 0 && mouseX < board.getCols()*cellSize &&
            mouseY >= 0 && mouseY < board.getRows()*cellSize;

        if (mouseControlEnabled && insideBoard && mouseMovedThisFrame) {
            int targetGridX = std::clamp(mouseX / cellSize, 0, board.getCols()-1);
            int targetGridY = std::clamp(mouseY / cellSize, 0, board.getRows()-1);

            snapShapeHorizontally(targetGridX);

            static Uint32 lastAutoPlace = 0;
            const Uint32 intervalMs = 16;
            Uint32 now = SDL_GetTicks();
            if (now - lastAutoPlace >= intervalMs) {
                if (!plannedMouseLock || !plannedCoversTarget) {
                    autoRotateCurrentShape(targetGridX, targetGridY);
                }
                planMousePlacement(targetGridX, targetGridY);
                if (plannedMouseLock && plannedCoversTarget) {
                    alignToPlannedLock();
                }
                lastAutoPlace = now;
            }
        } else {
            plannedMouseLock.reset();
        }
    }


    static bool rotationKeyHandled = false;
    if (inputHandler.isKeyJustPressed(keyBindings[Action::RotateRight])) {
        if (!rotationKeyHandled) {
            currentShape.rotateClockwise(board.getGrid(), board.getCols(), board.getRows());
            rotationKeyHandled = true;
        }
    } else {
        rotationKeyHandled = false;
    }

    if (inputHandler.isKeyJustPressed(keyBindings[Action::RotateLeft])) {
        currentShape.rotateCounterClockwise(board.getGrid(), board.getCols(), board.getRows());
    }

    if (inputHandler.isKeyPressed(keyBindings[Action::SoftDrop]) && currentTime - lastDownMoveTime >= downMoveDelay) {
        if (!board.isOccupied(currentShape.getCoords(), 0, 1)) {
            currentShape.moveDown();
            if (soundEnabled) SoundManager::PlayMoveSound();
            updateScore(0, 1, false);
            lastDownMoveTime = currentTime;
        }
    }

    if (inputHandler.isKeyJustPressed(keyBindings[Action::HardDrop])) {
        performHardDrop();
        return;
    }

    if (mouseControlEnabled) {
        if (inputHandler.isRightMouseClicked()) {
            if (ignoreNextMouseClick) { ignoreNextMouseClick = false; return; }
            holdPiece();
            if (soundEnabled) SoundManager::PlayHoldSound();
            return;
        }
        if (inputHandler.isLeftMouseClicked()) {
            if (ignoreNextMouseClick) { ignoreNextMouseClick = false; return; }
            performHardDrop();
            return;
        }
    }

    if (currentScreen == Screen::Settings) {
        if (inputHandler.isKeyJustPressed(SDLK_ESCAPE)) {
            currentScreen = Screen::Main;
            inputHandler.clearKeyState(SDLK_ESCAPE);
        }
        return;
    }

    if (inputHandler.isKeyJustPressed(keyBindings[Action::Hold])) {
        holdPiece();
        if (soundEnabled) SoundManager::PlayHoldSound();
    }
}


void Game::update() {
    updateScorePopups();
    bool gameOver = isGameOver();

    if (resumeCountdownActive || isPaused || gameOver) {
        if (gameOver && !gameOverMusicPlayed) {
            if (soundEnabled) {
                SoundManager::StopBackgroundMusic();
                SoundManager::PlayGameOverMusic();
            }
            isMusicPlaying = false;
            gameOverMusicPlayed = true;
        } 
        else if (isMusicPlaying) {
            if (soundEnabled) SoundManager::PauseBackgroundMusic();
            isMusicPlaying = false;
        }

        if (resumeCountdownActive) {
            Uint32 now = SDL_GetTicks();
            if (now - countdownStartTime >= 3000) {
                resumeCountdownActive = false;
                if (startGameTimerAfterCountdown) {
                    gameStartTime = now;
                    startGameTimerAfterCountdown = false;
                } else {
                    totalPausedTime += now - countdownStartTime;
                }
            }
        }
        return;
    }

    if (!isMusicPlaying && soundEnabled) {
        SoundManager::ResumeBackgroundMusic();
        isMusicPlaying = true;
    }

    board.updateAnimations();


    Uint32 currentTime = SDL_GetTicks();

    if (board.isClearingLines) {
        if (currentTime - board.clearStartTime >= 500) {
            board.finalizeLineClear();
            spawnNewShape();
            if (isGameOver()) return;
        }
        return;
    }

    if (currentTime - lastMoveTime >= static_cast<Uint32>(speed)) {
        if (!board.isOccupied(currentShape.getCoords(), 0, 1)) {
            currentShape.moveDown();
            if (soundEnabled) SoundManager::PlayMoveSound();
        } else {
            board.placeShape(currentShape);
            if (soundEnabled) SoundManager::PlayDropSound();

            int clearedLines = board.clearFullLines();
            updateScore(clearedLines, 0, false);

            if (clearedLines > 0) {
                board.clearStartTime = currentTime;
            } else {
                spawnNewShape();
                if (isGameOver()) return;
            }
        }
        lastMoveTime = currentTime;
    }

    shadowShape = currentShape;
    while (!board.isOccupied(shadowShape.getCoords(), 0, 1)) {
        shadowShape.moveDown();
    }
}

void Game::render() {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    if (backgroundTexture) {
        SDL_RenderCopy(renderer, backgroundTexture, nullptr, nullptr);
    }

    if (isPaused || currentScreen == Screen::Settings) {
        board.draw(renderer, UI::BoardOffsetX, UI::BoardOffsetY, false);
    } else {
        board.draw(renderer, UI::BoardOffsetX, UI::BoardOffsetY, !resumeCountdownActive);
        if (!resumeCountdownActive && !isGameOver() && !board.isClearingLines) {
            if (mouseControlEnabled && plannedMouseLock.has_value() && plannedCoversTarget) {
                plannedMouseLock->draw(renderer, board.getCellSize(), UI::BoardOffsetX, UI::BoardOffsetY, true);
            } else {
                shadowShape.draw(renderer, board.getCellSize(), UI::BoardOffsetX, UI::BoardOffsetY, true);
            }
            
            currentShape.draw(renderer, board.getCellSize(), UI::BoardOffsetX, UI::BoardOffsetY);
        }
    }

    renderScorePopups();

    renderNextPieces();
    renderHoldPiece();

    bool settingsScreen = (currentScreen == Screen::Settings);
    bool paused = isPaused && !settingsScreen;
    bool gameOver = isGameOver();

    mouseControlCheckbox->visible = settingsScreen;
    soundCheckbox->visible = settingsScreen;
    resetControlsBtn->visible = settingsScreen;
    doneBtn->visible = settingsScreen;

    for (auto& label : controlLabels) label->visible = settingsScreen;
    for (auto& button : controlButtons) button->visible = settingsScreen;

    resumeBtn->visible = paused;
    newGameBtn->visible = paused;
    settingsBtn->visible = paused;
    quitBtn->visible = paused;

    gameOverNewGameBtn->visible = gameOver;
    gameOverQuitBtn->visible = gameOver;

    if (gameOver) {
        renderGameOverScreen();
    }

    if (paused) {
        renderPauseMenu();
    }

    if (settingsScreen) {
        renderSettingsScreen();
    }

    const int cardWidth = 150;
    const int cardHeight = 80;
    const int cardMargin = 10;
    const int cardsStartY = 550;
    const int cornerRadius = 8;

    const int cardsX = 20;
    const int scoreCardY = cardsStartY;
    const int levelCardY = cardsStartY + cardHeight + cardMargin;
    const int linesCardY = cardsStartY + 2 * (cardHeight + cardMargin);

    renderInfoCard(cardsX, scoreCardY, cardWidth, cardHeight, cornerRadius,
                   "SCORE", std::to_string(score));
    renderInfoCard(cardsX, levelCardY, cardWidth, cardHeight, cornerRadius,
                   "LEVEL", std::to_string(level));
    renderInfoCard(cardsX, linesCardY, cardWidth, cardHeight, cornerRadius,
                   "LINES", std::to_string(totalLinesCleared));

    FormUI::Render(renderer);

    if (resumeCountdownActive) {
        Uint32 now = SDL_GetTicks();
        Uint32 elapsed = now - countdownStartTime;
        int countdownValue = 3 - static_cast<int>(elapsed / 1000);

        if (countdownValue > 0) {
            Uint32 msInSecond = elapsed % 1000;
            float scale = countdownScale(msInSecond);
            SDL_Color white = {255, 255, 255, 255};
            renderTextCenteredScaled(
                std::to_string(countdownValue),
                windowWidth / 2,
                windowHeight / 2,
                white,
                scale,
                fontLarge ? fontLarge : fontDefault
            );
        }
    }

    if ((!paused && !resumeCountdownActive && !gameOver && currentScreen == Screen::Main) || resumeCountdownActive) {
        Uint32 ms = getElapsedGameTime();
        int seconds = (ms / 1000) % 60;
        int minutes = (ms / 1000) / 60;
        char buffer[32];
        sprintf(buffer, "Time: %02d:%02d", minutes, seconds);

        int textX = windowWidth - 220;
        int textY = windowHeight - 40;
        SDL_Color textColor = {255, 255, 255, 255};
        renderText(buffer, textX, textY, textColor);
    }

    SDL_RenderPresent(renderer);
}



bool Game::isGameOver() const noexcept {
    if (board.isClearingLines) return false;
    return board.isOccupied(currentShape.getCoords(), 0, 0);
}


void Game::autoRotateCurrentShape(int targetGridX, int targetGridY) {
    // if (!isCellReachable(targetGridX, targetGridY)) return;
    constexpr int CONTACT_W  = 20;
    const int ANCHOR_W   = autoPlaceAnchorW;
    constexpr int STAB_W     = 15;
    constexpr int ANCHOR_CAP = 2;
    constexpr int FILL_BONUS = 1'000'000;

    const int rows = board.getRows();
    const int cols = board.getCols();
    const auto& grid = board.getGrid();
    const Shape original = currentShape;

    static std::vector<std::vector<int>> scratch;
    scratch.assign(rows, std::vector<int>(cols, 0));
    for (int r = 0; r < rows; ++r)
        for (int c = 0; c < cols; ++c)
            scratch[r][c] = grid[r][c] ? 1 : 0;

    struct RotInfo {
        Shape shape;
        int   minX, maxX, width;
        explicit RotInfo(const Shape& s) : shape(s), minX(0), maxX(0), width(0) {}
    };

    auto computeBounds = [&](const Shape& s, int& mn, int& mx) {
        mn = cols; mx = -1;
        for (const auto& c : s.getCoords()) { mn = std::min(mn, c.first); mx = std::max(mx, c.first); }
    };

    std::vector<RotInfo> rots; rots.reserve(4);

    RotInfo r0(original);
    computeBounds(r0.shape, r0.minX, r0.maxX);
    r0.width = r0.maxX - r0.minX + 1;
    rots.push_back(std::move(r0));

    for (int i = 1; i < 4; ++i) {
        RotInfo ri(rots.back().shape);
        ri.shape.rotateClockwise(grid, cols, rows);
        computeBounds(ri.shape, ri.minX, ri.maxX);
        ri.width = ri.maxX - ri.minX + 1;
        rots.push_back(std::move(ri));
    }

    int bestScore = std::numeric_limits<int>::min();
    int bestTie   = std::numeric_limits<int>::max();
    Shape best    = currentShape;
    bool foundAny = false;

    auto evalRange = [&](const RotInfo& base, int startX, int endX) {
        bool localFound = false;
        for (int xLeft = startX; xLeft <= endX; ++xLeft)
        {
            Shape cand = base.shape;
            int dxShift = xLeft - base.minX;
            for (auto& p : cand.coords) p.first += dxShift;
            if (board.isOccupied(cand.getCoords(), 0, 0)) continue;

            Shape dropped = cand;
            while (!board.isOccupied(dropped.getCoords(), 0, 1))
                dropped.moveDown();

            for (const auto& p : dropped.getCoords())
                if (p.second >= 0 && p.second < rows && p.first >= 0 && p.first < cols)
                    scratch[p.second][p.first] = 1;

            int cleared = 0;
            for (int r = 0; r < rows; ++r) {
                bool full = true;
                for (int c = 0; c < cols; ++c) { if (!scratch[r][c]) { full = false; break; } }
                if (full) ++cleared;
            }

            int aggregate = 0, holes = 0, bumpiness = 0;
            std::vector<int> heights(cols, 0);
            for (int c = 0; c < cols; ++c) {
                for (int r = 0; r < rows; ++r) {
                    if (scratch[r][c]) { heights[c] = rows - r; aggregate += heights[c]; break; }
                }
            }
            for (int c = 0; c < cols; ++c) {
                bool seen = false;
                for (int r = 0; r < rows; ++r) { if (scratch[r][c]) seen = true; else if (seen) ++holes; }
            }
            for (int c = 0; c < cols - 1; ++c) bumpiness += std::abs(heights[c] - heights[c+1]);

            int contacts = countContactSegments(dropped, board);

            int fmin = cols, fmax = -1, centreX = 0, minY = rows;
            for (const auto& p : dropped.getCoords()) {
                fmin = std::min(fmin, p.first);
                fmax = std::max(fmax, p.first);
                centreX += p.first;
                minY = std::min(minY, p.second);
            }
            centreX /= (int)dropped.getCoords().size();

            int rawDist = 0;
            if (targetGridX < fmin) rawDist = fmin - targetGridX;
            else if (targetGridX > fmax) rawDist = targetGridX - fmax;
            int anchorDist = std::max(0, rawDist - 1);
            anchorDist     = std::min(anchorDist, ANCHOR_CAP);
            int anchorPen  = -ANCHOR_W * anchorDist * anchorDist;

            int dxPivot = std::abs(cand.coords[0].first - original.coords[0].first);

            bool fillsTarget = false;
            if (targetGridY >= 0 && targetGridY < rows)
                for (const auto& p : dropped.getCoords())
                    if (p.first == targetGridX && p.second == targetGridY) { fillsTarget = true; break; }

            int yAlignBonus = 0;
            if (targetGridY >= 0 && targetGridY < rows)
                yAlignBonus = -std::abs(minY - targetGridY) * 5;

            int score =
                  cleared      * 1000
                + aggregate    *   -7
                + holes        * -120
                + bumpiness    *   -4
                + contacts     *  CONTACT_W
                + anchorPen
                + dxPivot      *  -STAB_W
                + (fillsTarget ? FILL_BONUS : 0)
                + yAlignBonus;

            int tie = std::max(0, std::abs(centreX - targetGridX) - 1);

            if (score > bestScore || (score == bestScore && tie < bestTie)) {
                bestScore = score; bestTie = tie; best = cand; localFound = true;
            }

            for (const auto& p : dropped.getCoords())
                if (p.second >= 0 && p.second < rows && p.first >= 0 && p.first < cols)
                    scratch[p.second][p.first] = grid[p.second][p.first] ? 1 : 0;
        }
        return localFound;
    };

    for (const auto& base : rots)
    {
        int W = autoPlaceWindow;
        int startX = std::max(0, targetGridX - W);
        int endX   = std::min(cols - base.width, targetGridX + W);
        if (startX <= endX) foundAny |= evalRange(base, startX, endX);
        if (!foundAny && cols - base.width >= 0) foundAny |= evalRange(base, 0, cols - base.width);
    }

    currentShape = best;
}


void Game::snapShapeHorizontally(int targetX) {
    {
        int minX = INT_MAX, maxX = INT_MIN;
        for (auto &c : currentShape.coords) {
            minX = std::min(minX, c.first);
            maxX = std::max(maxX, c.first);
        }

        const int leftBias = (currentShape.getType() == Shape::Type::O) ? 1 : 0;
        int desiredMinX = std::clamp(targetX - leftBias, 0, board.getCols() - (maxX - minX + 1));
        int dx = desiredMinX - minX;

        if (std::abs(dx) <= mouseMagnetRadius) return;

        mouseXAccumulator += dx * mouseFollowStrength;

        int steps = static_cast<int>(std::floor(std::abs(mouseXAccumulator)));
        if (steps <= 0) return;

        int dir = (mouseXAccumulator > 0.0f) ? 1 : -1;
        for (int i = 0; i < steps; ++i) {
            if (!board.isOccupied(currentShape.getCoords(), dir, 0)) {
                for (auto &c : currentShape.coords) c.first += dir;
                mouseXAccumulator -= dir;
            } else {
                mouseXAccumulator = 0.0f;
                break;
            }
        }
    }
}



void Game::renderNextPieces() {
    const int sidebarX = board.getCols() * cellSize + 300;
    const int sidebarY = 70;
    const int sidebarWidth = 150;
    const int sidebarHeight = 400;
    const int cornerRadius = 10;
    const int margin = 5;
    const int titleAreaHeight = 40;
    
    draw_smooth_rounded_rect(renderer, sidebarX, sidebarY, sidebarWidth, sidebarHeight, 
                   cornerRadius, {255, 255, 255, 255}, true);
    
    SDL_Rect innerRect = {
        sidebarX + margin,
        sidebarY + margin + titleAreaHeight,
        sidebarWidth - 2 * margin,
        sidebarHeight - 2 * margin - titleAreaHeight
    };
    draw_smooth_rounded_rect(renderer, innerRect.x, innerRect.y, innerRect.w, innerRect.h, 
                   cornerRadius - 1, {20, 25, 51, 255}, true);

    SDL_Color titleColor = {20, 25, 51, 255};
    
    SDL_Surface* textSurface = TTF_RenderText_Blended(fontMedium, "NEXT", titleColor);
    if (textSurface) {
        SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
        if (textTexture) {
            int textX = sidebarX + (sidebarWidth - textSurface->w) / 2;
            int textY = sidebarY + (titleAreaHeight - textSurface->h) / 2;
            SDL_Rect textRect = {textX, textY, textSurface->w, textSurface->h};
            SDL_RenderCopy(renderer, textTexture, nullptr, &textRect);
            SDL_DestroyTexture(textTexture);
        }
        SDL_FreeSurface(textSurface);
    }

    bool showNextPieces = (!resumeCountdownActive && !isPaused && currentScreen != Screen::Settings && !isGameOver());
    if (!showNextPieces) return;

    int previewCellSize = cellSize * 0.75;
    int spacing = 20;
    int slotHeight = 80;

    for (size_t i = 0; i < std::min(nextPieces.size(), size_t(3)); i++) {
        const auto& shape = nextPieces[i];
        tmpCoords.clear();
        shape.getLocalCoords(tmpCoords);
        SDL_Color color = shape.getColor();

        int minX = 0, maxX = 0;
        int minY = 0, maxY = 0;
        for (const auto& coord : tmpCoords) {
            minX = std::min(minX, coord.first);
            maxX = std::max(maxX, coord.first);
            minY = std::min(minY, coord.second);
            maxY = std::max(maxY, coord.second);
        }

        int shapePixelWidth = (maxX - minX + 1) * previewCellSize;
        int shapePixelHeight = (maxY - minY + 1) * previewCellSize;

        int drawX = sidebarX + margin + (innerRect.w - shapePixelWidth) / 2;
        int drawY = innerRect.y + spacing + i * (slotHeight + spacing) + 
                   (slotHeight - shapePixelHeight) / 2;

        const int gap = 1;
        const int previewCellDrawSize = previewCellSize - 2 * gap;

        for (const auto& coord : tmpCoords) {
            int x = drawX + (coord.first - minX) * previewCellSize + gap;
            int y = drawY + (coord.second - minY) * previewCellSize + gap;
            draw_preview_block(renderer, x, y,
                       previewCellDrawSize, previewCellDrawSize,
                       color);
        }
    }
}



void Game::spawnNewShape() {
    if (nextPieces.empty()) {
        for (int i = 0; i < 3; i++) {
            std::uniform_int_distribution<int> dist(0, 6);
            Shape::Type newType = static_cast<Shape::Type>(dist(rng));
            nextPieces.push_back(Shape(newType, board.getCols() / 2, 0, {255, 255, 255, 255}));
        }
    }

    currentShape = nextPieces.front();
    nextPieces.pop_front();

    if (isGameOver()) {
        return;
    }

    {
        std::uniform_int_distribution<int> dist(0, 6);
        Shape::Type newType = static_cast<Shape::Type>(dist(rng));
        nextPieces.push_back(Shape(newType, board.getCols() / 2, 0, {255, 255, 255, 255}));
    }

    canHold = true;
    lastMouseTargetGridX = std::numeric_limits<int>::min();
}



void Game::checkLevelUp() {
    int newLevel = (totalLinesCleared / 10) + 1;

    if (newLevel > level) {
        level = newLevel;
        updateSpeed();
        triggerLevelUpPopup();
    }
}

void Game::updateScore(int clearedLines,int dropDistance, bool hardDrop) {
    if (clearedLines > 0) {
        totalLinesCleared += clearedLines;
        if (soundEnabled) SoundManager::PlayClearSound();
    }

    int points = 0;
    switch (clearedLines) {
        case 1: points += 40;   break;
        case 2: points += 100;  break;
        case 3: points += 300;  break;
        case 4: points += 1200; break;
    }
    points *= (level + 1);
    points += dropDistance * (hardDrop ? 2 : 1);
    score  += points;

    if (clearedLines > 0) {
        triggerScorePopup(clearedLines, points);
    }

    checkLevelUp();
}


void Game::renderText(const std::string& text, int x, int y, SDL_Color color) {
    if (!fontDefault) {
        std::cerr << "Font not initialized!" << std::endl;
        return;
    }

    if (text.empty()) {
        std::cerr << "Skipping rendering empty text" << std::endl;
        return;
    }

    SDL_Surface* textSurface = TTF_RenderText_Blended(fontDefault, text.c_str(), color);
    if (!textSurface || textSurface->w == 0) {
        std::cerr << "Text rendering failed: " << TTF_GetError() << std::endl;
        return;
    }

    SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
    if (!textTexture) {
        std::cerr << "Texture creation failed: " << SDL_GetError() << std::endl;
        SDL_FreeSurface(textSurface);
        return;
    }

    SDL_Rect textRect = { x, y, textSurface->w, textSurface->h };
    SDL_RenderCopy(renderer, textTexture, nullptr, &textRect);

    SDL_FreeSurface(textSurface);
    SDL_DestroyTexture(textTexture);
}



void Game::holdPiece() {
    if (!canHold) return;

    Shape::Type currentType = currentShape.getType();
    SDL_Color currentColor = currentShape.getColor();

    if (heldShape.has_value()) {
        Shape::Type heldType = heldShape->getType();
        SDL_Color heldColor = heldShape->getColor();

        heldShape = Shape(currentType, 0, 0, currentColor);
        currentShape = Shape(heldType, board.getCols() / 2, 0, heldColor);
    } else {
        heldShape = Shape(currentType, 0, 0, currentColor);
        spawnNewShape();
    }

    canHold = false;
}

void Game::renderHoldPiece() {
    const int holdBoxX = 20;
    const int holdBoxY = 70;
    const int holdBoxWidth = 150;
    const int holdBoxHeight = 180;
    const int cornerRadius = 10;
    const int margin = 5;
    const int titleAreaHeight = 40;

    draw_smooth_rounded_rect(renderer, holdBoxX, holdBoxY, holdBoxWidth, holdBoxHeight, 
                   cornerRadius, {255, 255, 255, 255}, true);
    
    SDL_Rect innerRect = {
        holdBoxX + margin,
        holdBoxY + margin + titleAreaHeight,
        holdBoxWidth - 2 * margin,
        holdBoxHeight - 2 * margin - titleAreaHeight
    };
    draw_smooth_rounded_rect(renderer, innerRect.x, innerRect.y, innerRect.w, innerRect.h, 
                   cornerRadius - 1, {20, 25, 51, 255}, true);

    SDL_Color titleColor = {20, 25, 51, 255};
    SDL_Surface* textSurface = TTF_RenderText_Blended(fontMedium, "HOLD", titleColor);
    if (textSurface) {
        SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
        if (textTexture) {
            int textX = holdBoxX + (holdBoxWidth - textSurface->w) / 2;
            int textY = holdBoxY + (titleAreaHeight - textSurface->h) / 2;
            SDL_Rect textRect = {textX, textY, textSurface->w, textSurface->h};
            SDL_RenderCopy(renderer, textTexture, nullptr, &textRect);
            SDL_DestroyTexture(textTexture);
        }
        SDL_FreeSurface(textSurface);
    }

    bool showHeldPiece = (!resumeCountdownActive && !isPaused && currentScreen != Screen::Settings && !isGameOver());
    if (showHeldPiece && heldShape.has_value()) {
        tmpCoords.clear();
        heldShape->getLocalCoords(tmpCoords);
        SDL_Color color = heldShape->getColor();

        int minX = 0, maxX = 0;
        int minY = 0, maxY = 0;
        for (const auto& coord : tmpCoords) {
            minX = std::min(minX, coord.first);
            maxX = std::max(maxX, coord.first);
            minY = std::min(minY, coord.second);
            maxY = std::max(maxY, coord.second);
        }

        int previewCellSize = cellSize * 0.75;
        int shapePixelWidth = (maxX - minX + 1) * previewCellSize;
        int shapePixelHeight = (maxY - minY + 1) * previewCellSize;

        int drawX = holdBoxX + margin + (innerRect.w - shapePixelWidth) / 2;
        int drawY = holdBoxY + margin + titleAreaHeight + 
                   (innerRect.h - shapePixelHeight) / 2;

        const int gap = 1;
        const int previewCellDrawSize = previewCellSize - 2 * gap;

        for (const auto& coord : tmpCoords) {
            int x = drawX + (coord.first - minX) * previewCellSize + gap;
            int y = drawY + (coord.second - minY) * previewCellSize + gap;
            draw_preview_block(renderer, x, y,
                       previewCellDrawSize, previewCellDrawSize,
                       color);
        }
    }
}



void Game::renderGameOverScreen() {
    const int cardWidth = 400;
    const int cardHeight = 400;
    const int cardX = (windowWidth - cardWidth) / 2;
    const int cardY = (windowHeight - cardHeight) / 2;
    const int cornerRadius = 18;

    draw_smooth_rounded_rect(renderer, cardX, cardY, cardWidth, cardHeight, cornerRadius, {20, 25, 51, 240}, true);

    SDL_Color textColor = {255, 255, 255, 255};
    renderText("GAME OVER", cardX + 90, cardY + 40, textColor);

    renderText("Score:",  cardX + 60, cardY + 130, textColor);
    renderText(std::to_string(score),  cardX + 200, cardY + 130, textColor);

    renderText("Lines:",  cardX + 60, cardY + 180, textColor);
    renderText(std::to_string(totalLinesCleared), cardX + 200, cardY + 180, textColor);

    renderText("Level:",  cardX + 60, cardY + 230, textColor);
    renderText(std::to_string(level), cardX + 200, cardY + 230, textColor);

    const int buttonWidth = 180;
    const int buttonHeight = 40;
    const int buttonSpacing = 20;

    const int buttonX = cardX + (cardWidth - buttonWidth) / 2;
    const int newGameY = cardY + 280;
    const int quitY = newGameY + buttonHeight + buttonSpacing;

    gameOverNewGameBtn->bounds.x = buttonX;
    gameOverNewGameBtn->bounds.y = newGameY;
    gameOverNewGameBtn->bounds.w = buttonWidth;
    gameOverNewGameBtn->bounds.h = buttonHeight;

    gameOverQuitBtn->bounds.x = buttonX;
    gameOverQuitBtn->bounds.y = quitY;
    gameOverQuitBtn->bounds.w = buttonWidth;
    gameOverQuitBtn->bounds.h = buttonHeight;
}



void Game::resetGame() {
    if (soundEnabled) {
        SoundManager::StopBackgroundMusic();
        SoundManager::StopGameOverMusic();
    }

    board.clearBoard();
    score = totalLinesCleared = 0;
    level = 1;
    nextPieces.clear();
    canHold = true;
    heldShape.reset();
    spawnNewShape();

    running = true;
    ignoreNextMouseClick = true;
    resumeCountdownActive = true;
    countdownStartTime = SDL_GetTicks();
    totalPausedTime = pauseStartTime = 0;
    startGameTimerAfterCountdown = true;
    gameStartTime = 0;
    gameOverMusicPlayed = false;

    if (soundEnabled) {
        SoundManager::RestartBackgroundMusic();
        isMusicPlaying = true;
    } else {
        isMusicPlaying = false;
    }
}



void Game::updateSpeed() {
    if (level == 0) speed = 800;
    else if (level == 1) speed = 717;
    else if (level == 2) speed = 633;
    else if (level == 3) speed = 550;
    else if (level == 4) speed = 467;
    else if (level == 5) speed = 383;
    else if (level == 6) speed = 300;
    else if (level == 7) speed = 217;
    else if (level == 8) speed = 133;
    else if (level == 9) speed = 100;
    else if (level >= 10 && level <= 12) speed = 83;
    else if (level >= 13 && level <= 15) speed = 67;
    else if (level >= 16 && level <= 18) speed = 50;
    else if (level >= 19 && level <= 28) speed = 33;
    else speed = 16;
}

void Game::renderPauseMenu() {
    const int cardWidth = 400;
    const int cardHeight = 400;
    const int cardX = (windowWidth - cardWidth) / 2;
    const int cardY = (windowHeight - cardHeight) / 2;
    const int cornerRadius = 15;

    drawCardWithBorder(renderer, cardX, cardY, cardWidth, cardHeight,cornerRadius, {20, 25, 51, 180}, {255, 255, 255, 255}, 2);
    
    SDL_Color textColor = {255, 255, 255, 255};
    renderText("PAUSED", windowWidth / 2 - 60, cardY + 30, textColor);
    
    resumeBtn->bounds.x = windowWidth / 2 - 100;
    resumeBtn->bounds.y = cardY + 80;
    
    newGameBtn->bounds.x = windowWidth / 2 - 100;
    newGameBtn->bounds.y = cardY + 150;
    
    settingsBtn->bounds.x = windowWidth / 2 - 100;
    settingsBtn->bounds.y = cardY + 220;
    
    quitBtn->bounds.x = windowWidth / 2 - 100;
    quitBtn->bounds.y = cardY + 290;
}

void Game::renderSettingsScreen() {
    const int cardWidth = 500;
    const int cardHeight = 800;
    const int cardX = (windowWidth - cardWidth) / 2;
    const int cardY = (windowHeight - cardHeight) / 2;
    const int cornerRadius = 18;

    drawCardWithBorder(renderer, cardX, cardY, cardWidth, cardHeight, cornerRadius, {20, 25, 51, 230}, {255, 255, 255, 255}, 2);  
    SDL_Color white = {255, 255, 255, 255};
    renderText("SETTINGS", cardX + (cardWidth - 180) / 2, cardY + 32, white);

    mouseControlCheckbox->bounds.x = cardX + (cardWidth - mouseControlCheckbox->bounds.w) / 2;
    mouseControlCheckbox->bounds.y = cardY + 100;

    soundCheckbox->bounds.x = cardX + (cardWidth - soundCheckbox->bounds.w) / 2;
    soundCheckbox->bounds.y = cardY + 150;

    int controlStartY = cardY + 210;
    for (size_t i = 0; i < controlLabels.size(); ++i) {
        controlLabels[i]->bounds.x = cardX + 40;
        controlLabels[i]->bounds.y = controlStartY + int(i) * 40;

        controlButtons[i]->bounds.x = cardX + cardWidth - 240;
        controlButtons[i]->bounds.y = controlStartY + int(i) * 40;
    }
}


Uint32 Game::getElapsedGameTime() const noexcept {
    if (gameStartTime == 0) {
        return 0;
    }
    Uint32 now = SDL_GetTicks();
    Uint32 pausedFor = totalPausedTime;
    if (isPaused) {
        pausedFor += now - pauseStartTime;
    }
    if (resumeCountdownActive) {
        pausedFor += now - countdownStartTime;
    }
    
    return now - gameStartTime - pausedFor;
}

void Game::renderInfoCard(int x, int y, int width, int height, int radius, 
                         const std::string& title, const std::string& value) {
    const int margin = 5;
    const int titleAreaHeight = 30;

    draw_smooth_rounded_rect(renderer, x, y, width, height, radius, 
                   {255, 255, 255, 255}, true);

    SDL_Rect innerRect = {
        x + margin,
        y + margin + titleAreaHeight,
        width - 2 * margin,
        height - 2 * margin - titleAreaHeight
    };
    draw_smooth_rounded_rect(renderer, innerRect.x, innerRect.y, innerRect.w, innerRect.h, 
                   radius - 2, {20, 25, 51, 255}, true);

    SDL_Color titleColor = {20, 25, 51, 255};
    SDL_Surface* titleSurface = TTF_RenderText_Blended(fontMedium, title.c_str(), titleColor);
    if (titleSurface) {
        SDL_Texture* titleTexture = SDL_CreateTextureFromSurface(renderer, titleSurface);
        if (titleTexture) {
            int textX = x + (width - titleSurface->w) / 2;
            int textY = y + (titleAreaHeight - titleSurface->h) / 2;
            SDL_Rect textRect = {textX, textY, titleSurface->w, titleSurface->h};
            SDL_RenderCopy(renderer, titleTexture, nullptr, &textRect);
            SDL_DestroyTexture(titleTexture);
        }
        SDL_FreeSurface(titleSurface);
    }

    SDL_Color valueColor = {255, 255, 255, 255};
    SDL_Surface* valueSurface = TTF_RenderText_Blended(fontDefault, value.c_str(), valueColor);
    if (valueSurface) {
        SDL_Texture* valueTexture = SDL_CreateTextureFromSurface(renderer, valueSurface);
        if (valueTexture) {
            int textX = innerRect.x + (innerRect.w - valueSurface->w) / 2;
            int textY = innerRect.y + (innerRect.h - valueSurface->h) / 2;
            SDL_Rect textRect = {textX, textY, valueSurface->w, valueSurface->h};
            SDL_RenderCopy(renderer, valueTexture, nullptr, &textRect);
            SDL_DestroyTexture(valueTexture);
        }
        SDL_FreeSurface(valueSurface);
    }
}


int Game::countContactSegments(const Shape& shape, const Board& board) const {
    const auto& coords = shape.getCoords();
    const auto& grid   = board.getGrid();
    const int   rows   = board.getRows();
    const int   cols   = board.getCols();

    struct PairHash {
        size_t operator()(const std::pair<int,int>& p) const noexcept
        { return (static_cast<size_t>(p.first) << 16) ^ static_cast<size_t>(p.second); }
    };
    std::unordered_set<std::pair<int,int>, PairHash> shapeCells(coords.begin(), coords.end());

    const int dx[4] = { 0,  0, -1,  1 };
    const int dy[4] = { -1, 1,  0,  0 };

    int contacts = 0;

    for (auto [x, y] : coords)
    {
        for (int k = 0; k < 4; ++k)
        {
            const int nx = x + dx[k];
            const int ny = y + dy[k];

            if (nx < 0 || nx >= cols || ny < 0 || ny >= rows) {
                ++contacts;
                continue;
            }

            if (shapeCells.find({nx, ny}) != shapeCells.end())
                continue;

            if (grid[ny][nx] != 0)
                ++contacts;
        }
    }
    return contacts;
}


float Game::easeOutCubic(float t) noexcept {
    return 1.0f - std::pow(1.0f - t, 3.0f);
}

float Game::easeInOutQuad(float t) noexcept {
    return (t < 0.5f) ? 2.0f * t * t : 1.0f - std::pow(-2.0f * t + 2.0f, 2.0f) * 0.5f;
}

float Game::countdownScale(Uint32 msInSecond) const noexcept {
    const float growDur   = 550.0f;
    const float holdDur   = 200.0f;
    const float settleDur = 250.0f;

    const float startScale     = 0.65f;
    const float overshootScale = 1.25f;
    const float finalScale     = 1.00f;

    float t = static_cast<float>(msInSecond);

    if (t < growDur) {
        float p = t / growDur;
        return startScale + (overshootScale - startScale) * easeOutCubic(p);
    } else if (t < growDur + holdDur) {
        return overshootScale;
    } else {
        float p = (t - (growDur + holdDur)) / settleDur;
        if (p > 1.0f) p = 1.0f;
        return overshootScale + (finalScale - overshootScale) * easeInOutQuad(p);
    }
}

void Game::renderTextCenteredScaled(const std::string& text, int cx, int cy,
                                    SDL_Color color, float scale, TTF_Font* useFont) {
    if (!useFont || text.empty()) return;

    SDL_Surface* surf = TTF_RenderText_Blended(useFont, text.c_str(), color);
    if (!surf || surf->w == 0 || surf->h == 0) {
        if (surf) SDL_FreeSurface(surf);
        return;
    }

    SDL_Texture* tex = SDL_CreateTextureFromSurface(renderer, surf);
    if (!tex) {
        SDL_FreeSurface(surf);
        return;
    }

    int w = surf->w;
    int h = surf->h;

    int dstW = static_cast<int>(w * scale);
    int dstH = static_cast<int>(h * scale);
    SDL_Rect dst { cx - dstW / 2, cy - dstH / 2, dstW, dstH };

    SDL_Color shadowCol { 0, 0, 0, 160 };
    SDL_Surface* shadowSurf = TTF_RenderText_Blended(useFont, text.c_str(), shadowCol);
    if (shadowSurf) {
        SDL_Texture* shadowTex = SDL_CreateTextureFromSurface(renderer, shadowSurf);
        if (shadowTex) {
            int sw = shadowSurf->w, sh = shadowSurf->h;
            int sdw = static_cast<int>(sw * scale);
            int sdh = static_cast<int>(sh * scale);
            SDL_Rect shadowDst { cx - sdw / 2 + 4, cy - sdh / 2 + 4, sdw, sdh };
            SDL_RenderCopy(renderer, shadowTex, nullptr, &shadowDst);
            SDL_DestroyTexture(shadowTex);
        }
        SDL_FreeSurface(shadowSurf);
    }

    SDL_RenderCopy(renderer, tex, nullptr, &dst);

    SDL_DestroyTexture(tex);
    SDL_FreeSurface(surf);
}

void Game::triggerScorePopup(const std::string& msg, SDL_Color col, int cx, int cy) {
    ScorePopup p;
    p.text = msg;
    p.color = col;
    p.font  = fontMedium ? fontMedium : fontDefault;
    p.start = SDL_GetTicks();
    p.duration = 900;
    p.x = float(cx);
    p.y0 = float(cy);
    p.rise = 40.f;

    SDL_Color shadowCol{0,0,0,160};
    if (auto* s = TTF_RenderText_Blended(p.font, p.text.c_str(), p.color)) {
        p.tex = SDL_CreateTextureFromSurface(renderer, s);
        p.texW = s->w; p.texH = s->h;
        SDL_FreeSurface(s);
    }
    if (auto* s2 = TTF_RenderText_Blended(p.font, p.text.c_str(), shadowCol)) {
        p.shadowTex = SDL_CreateTextureFromSurface(renderer, s2);
        SDL_FreeSurface(s2);
    }

    scorePopups.push_back(std::move(p));
}


void Game::updateScorePopups() {
    Uint32 now = SDL_GetTicks();
    scorePopups.erase(
        std::remove_if(scorePopups.begin(), scorePopups.end(),
            [now](const ScorePopup& p) {
                if (now < p.start + p.delay) return false;
                return now >= p.start + p.delay + p.duration;
            }),
        scorePopups.end()
    );
}

void Game::triggerLevelUpPopup() {
    const int cx = UI::BoardOffsetX + int(board.getCols() * board.getCellSize() * 0.5f);
    const int cy = UI::BoardOffsetY + int(board.getCellSize() * 5.5f);

    triggerScorePopup("Level up!", SDL_Color{255,255,255,255}, cx, cy);
    auto& p = scorePopups.back();
    p.rise = 80.f;
    p.duration = 1200u;
}

int Game::minYOf(const Shape& s) noexcept {
    int my = INT_MAX;
    for (auto& c : s.getCoords()) my = std::min(my, c.second);
    return (my == INT_MAX) ? 0 : my;
}
bool Game::shapeCoversCell(const Shape& s, int gx, int gy) noexcept {
    for (auto& c : s.getCoords()) if (c.first == gx && c.second == gy) return true;
    return false;
}

std::vector<Shape> Game::computeReachableLocks(const Shape& start) const {
    static std::unordered_map<Shape::Type, std::vector<Shape>> lockCache;
    const auto type = start.getType();
    auto it = lockCache.find(type);
    if (it != lockCache.end()) {
        return it->second;
    }

    const auto& grid = board.getGrid();
    const int rows = board.getRows(), cols = board.getCols();
    std::vector<Shape> layer;
    layer.push_back(start);
    std::unordered_set<CoordsKey, KeyHash> globallySeen;
    globallySeen.insert(makeKey(start));
    std::vector<Shape> locks;

    while (!layer.empty()) {
        std::deque<Shape> q(layer.begin(), layer.end());
        std::unordered_set<CoordsKey, KeyHash> closureSeen;
        std::vector<Shape> closure;
        while (!q.empty()) {
            Shape s = q.front(); q.pop_front();
            CoordsKey k = makeKey(s);
            if (!closureSeen.insert(k).second) continue;
            closure.push_back(s);

            if (!board.isOccupied(s.getCoords(), -1, 0)) {
                Shape t = s; t.moveLeft(); if (!closureSeen.count(makeKey(t))) q.push_back(t);
            }
            if (!board.isOccupied(s.getCoords(), +1, 0)) {
                Shape t = s; t.moveRight(cols); if (!closureSeen.count(makeKey(t))) q.push_back(t);
            }
            {
                Shape t = s; t.rotateClockwise(grid, cols, rows);
                if (!closureSeen.count(makeKey(t))) q.push_back(t);
            }
            {
                Shape t = s; t.rotateCounterClockwise(grid, cols, rows);
                if (!closureSeen.count(makeKey(t))) q.push_back(t);
            }
        }

        std::vector<Shape> nextLayer;
        for (auto& s : closure) {
            if (board.isOccupied(s.getCoords(), 0, 1)) {
                CoordsKey lk = makeKey(s);
                if (!globallySeen.count(lk)) {
                    globallySeen.insert(lk);
                    locks.push_back(s);
                }
            } else {
                Shape d = s; d.moveDown();
                CoordsKey dk = makeKey(d);
                if (globallySeen.insert(dk).second) nextLayer.push_back(d);
            }
        }
        layer.swap(nextLayer);
    }

    lockCache[type] = locks;
    return locks;
}

int Game::scorePlacement(const Shape& locked, int targetGridX, int targetGridY) const {
    const int rows = board.getRows(), cols = board.getCols();
    const auto& G  = board.getGrid();

    static std::vector<std::vector<int>> scratch;
    scratch.assign(rows, std::vector<int>(cols, 0));
    for (int r=0;r<rows;++r) for (int c=0;c<cols;++c) scratch[r][c] = (G[r][c] ? 1 : 0);
    for (auto& p : locked.getCoords())
        if (p.second>=0 && p.second<rows && p.first>=0 && p.first<cols) scratch[p.second][p.first] = 1;

    int cleared = 0;
    for (int r=0;r<rows;++r) {
        bool full=true; for (int c=0;c<cols;++c) if (!scratch[r][c]) { full=false; break; }
        if (full) ++cleared;
    }

    int aggregate=0, holes=0, bump=0;
    std::vector<int> h(cols,0);
    for (int c=0;c<cols;++c){
        for (int r=0;r<rows;++r){ if (scratch[r][c]) { h[c]=rows-r; aggregate+=h[c]; break; } }
    }
    for (int c=0;c<cols;++c){
        bool seen=false;
        for (int r=0;r<rows;++r){
            if (scratch[r][c]) seen=true; else if (seen) ++holes;
        }
    }
    for (int c=0;c<cols-1;++c) bump += std::abs(h[c]-h[c+1]);

    int contacts = countContactSegments(locked, board);

    int fmin=cols, fmax=-1, centreX=0, minY=rows;
    for (auto& p : locked.getCoords()) {
        fmin = std::min(fmin, p.first);
        fmax = std::max(fmax, p.first);
        centreX += p.first;
        minY = std::min(minY, p.second);
    }
    centreX /= (int)locked.getCoords().size();

    int rawDist = 0;
    if (targetGridX < fmin) rawDist = fmin - targetGridX;
    else if (targetGridX > fmax) rawDist = targetGridX - fmax;

    constexpr int CONTACT_W  = 20;
    const     int ANCHOR_W   = (int)autoPlaceAnchorW;
    constexpr int ANCHOR_CAP = 2;
    constexpr int FILL_BONUS = 200;

    int anchorDist = std::max(0, rawDist - 1);
    anchorDist     = std::min(anchorDist, ANCHOR_CAP);
    int anchorPen = -ANCHOR_W * anchorDist;

    bool fillsTarget = (targetGridY >= 0) && shapeCoversCell(locked, targetGridX, targetGridY);
    int yAlignBonus  = (targetGridY >= 0) ? -std::abs(minY - targetGridY) * 5 : 0;

    int score =
          cleared      * 1000
        + aggregate    *   -7
        + holes        * -120
        + bump         *   -4
        + contacts     *  CONTACT_W
        + anchorPen
        + (fillsTarget ? FILL_BONUS : 0)
        + yAlignBonus;

    score -= std::max(0, std::abs(centreX - targetGridX) - 1);
    return score;
}

void Game::planMousePlacement(int targetGridX, int targetGridY) {
    plannedMouseLock.reset();
    plannedCoversTarget = false;
    
    auto locks = computeReachableLocks(currentShape);
    if (locks.empty()) return;

    int bestScore = std::numeric_limits<int>::min();
    int bestIdx   = -1;
    for (int i = 0; i < (int)locks.size(); ++i) {
        int s = scorePlacement(locks[i], targetGridX, targetGridY);
        if (s > bestScore) { 
            bestScore = s; 
            bestIdx = i; 
        }
    }
    
    if (bestIdx >= 0) {
        plannedMouseLock = locks[bestIdx];
        plannedCoversTarget = shapeCoversCell(*plannedMouseLock, targetGridX, targetGridY);
    }
}

void Game::alignToPlannedLock() {
    if (!plannedMouseLock) return;

    Shape s = *plannedMouseLock;

    int dy = minYOf(currentShape) - minYOf(s);
    for (auto& p : s.coords) p.second += dy;

    if (board.isOccupied(s.getCoords(), 0, 0)) return;

    currentShape = s;
}

void Game::performHardDrop() {
    Shape placed = currentShape;
    if (mouseControlEnabled && plannedMouseLock.has_value() && plannedCoversTarget) {
        placed = *plannedMouseLock;
    } else {
        while (!board.isOccupied(placed.getCoords(), 0, 1)) {
            placed.moveDown();
        }
    }

    const int dropDistance = std::max(0, minYOf(placed) - minYOf(currentShape));

    board.placeShape(placed);
    board.triggerHardDropAnim(placed);
    if (soundEnabled) SoundManager::PlayDropSound();

    const int clearedLines = board.clearFullLines();
    updateScore(clearedLines, dropDistance, true);

    if (clearedLines > 0) {
        board.clearStartTime = SDL_GetTicks();
    } else {
        spawnNewShape();
    }

    lastMoveTime = SDL_GetTicks();
    plannedMouseLock.reset();
}

bool Game::isCellReachable(int gridX, int gridY) const {
    return board.isCellReachable(gridX, gridY);
}

void Game::warmupOnce() {
    if (didWarmup) return;

    board.prewarm(renderer);

    TTF_Font* f = (fontMedium ? fontMedium : fontDefault);
    if (f) {
        SDL_Color white{255,255,255,255};

        const char* warmMsgs[] = {
            "HOLD","NEXT","Score","Lines","Level",
            "Single","Double","Triple","Tetris","Level up!"
        };
        for (auto s : warmMsgs) {
            if (SDL_Surface* surf = TTF_RenderText_Blended(f, s, white)) {
                if (SDL_Texture* tex = SDL_CreateTextureFromSurface(renderer, surf)) SDL_DestroyTexture(tex);
                SDL_FreeSurface(surf);
            }
        }

        const char* glyphSets[] = {"0123456789", "+-xX"};
        for (auto s : glyphSets) {
            if (SDL_Surface* surf = TTF_RenderText_Blended(f, s, white)) {
                if (SDL_Texture* tex = SDL_CreateTextureFromSurface(renderer, surf)) SDL_DestroyTexture(tex);
                SDL_FreeSurface(surf);
            }
        }
    }

    if (board.whiteCellTexture) {
        SDL_SetTextureAlphaMod(board.whiteCellTexture, 0);
        SDL_Rect tiny{0,0,8,8};
        SDL_RenderCopyEx(renderer, board.whiteCellTexture, nullptr, &tiny, 45.0, nullptr, SDL_FLIP_NONE);
        SDL_SetTextureAlphaMod(board.whiteCellTexture, 255);
    }

    didWarmup = true;
}


void Game::triggerScorePopup(int clearedLines, int linePoints) {
    if (clearedLines <= 0) return;

    const int boardOffsetX = UI::BoardOffsetX;
    const int boardOffsetY = UI::BoardOffsetY;

    const float cx = boardOffsetX + board.getCols() * board.getCellSize() * 0.5f;

    float avgRow = 0.f;
    const auto& rows = board.getLinesToClear();
    if (!rows.empty()) {
        for (int r : rows) avgRow += r;
        avgRow /= rows.size();
    }
    const float cy = boardOffsetY + (avgRow + 0.5f) * board.getCellSize();

    const int labelYOffset  = -12;
    const int pointsYOffset = +6;

    std::string label;
    switch (clearedLines) {
        case 1: label = "Single"; break;
        case 2: label = "Double"; break;
        case 3: label = "Triple"; break;
        default: label = "Tetris"; break;
    }

    const SDL_Color white{255,255,255,255};

    triggerScorePopup(label, white, int(cx), int(cy) + labelYOffset);
    triggerScorePopup(std::string("+") + std::to_string(linePoints), white,
                      int(cx), int(cy) + pointsYOffset);
}


void Game::renderScorePopups() {
    const Uint32 now = SDL_GetTicks();
    if (scorePopups.empty()) return;

    for (auto& p : scorePopups) {
        const Uint32 elapsed = now - p.start;
        if (elapsed > p.duration) continue;

        const float t = elapsed / float(p.duration);
        const float y = p.y0 - p.rise * t;
        const float s = p.scale;
        const int   w = int(p.texW * s), h = int(p.texH * s);

        Uint8 alpha = 255;
        if (t > 0.7f) alpha = Uint8(255 * (1.f - (t - 0.7f) / 0.3f));

        SDL_Rect dst{ int(p.x) - w/2, int(y) - h/2, w, h };

        if (p.shadowTex) {
            SDL_Rect sh = dst; sh.x += 4; sh.y += 4;
            SDL_SetTextureAlphaMod(p.shadowTex, alpha);
            SDL_RenderCopy(renderer, p.shadowTex, nullptr, &sh);
        }
        if (p.tex) {
            SDL_SetTextureAlphaMod(p.tex, alpha);
            SDL_RenderCopy(renderer, p.tex, nullptr, &dst);
        }
    }

    scorePopups.erase(
        std::remove_if(scorePopups.begin(), scorePopups.end(),
            [&](ScorePopup& p){ return (now - p.start) > p.duration; }),
        scorePopups.end()
    );
}

// --- Game.hpp ---
#pragma once

#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_mixer.h>
#include <SDL2/SDL_image.h>
#include <deque>
#include <memory>
#include <optional>
#include <string>
#include <unordered_map>
#include <iostream>
#include <vector>
#include <limits>
#include <stdexcept>
#include <random>

#include "Board.hpp"
#include "Shape.hpp"
#include "InputHandler.hpp"
#include "SDLFormUI.hpp"
#include "SoundManager.hpp"

class UILabel;
class UIButton;
class UICheckbox;

struct ScorePopup {
    std::string text;
    SDL_Color   color{255,255,255,255};
    float       x = 0.f, y0 = 0.f, rise = 40.f;
    Uint32      start = 0, delay = 0, duration = 900;
    float       scale = 1.0f;
    TTF_Font*   font = nullptr;

    SDL_Texture* tex = nullptr;
    SDL_Texture* shadowTex = nullptr;
    int texW = 0, texH = 0;

    ScorePopup() = default;
    ~ScorePopup() {
        if (tex) SDL_DestroyTexture(tex);
        if (shadowTex) SDL_DestroyTexture(shadowTex);
    }
    ScorePopup(const ScorePopup&) = delete;
    ScorePopup& operator=(const ScorePopup&) = delete;
    ScorePopup(ScorePopup&& o) noexcept
    : text(std::move(o.text)), color(o.color), x(o.x), y0(o.y0), rise(o.rise),
        start(o.start), delay(o.delay), duration(o.duration), scale(o.scale),
        font(o.font), tex(o.tex), shadowTex(o.shadowTex), texW(o.texW), texH(o.texH) {
        o.tex = nullptr; o.shadowTex = nullptr;
    }
    ScorePopup& operator=(ScorePopup&& o) noexcept {
        if (this != &o) {
            if (tex) SDL_DestroyTexture(tex);
            if (shadowTex) SDL_DestroyTexture(shadowTex);
            text = std::move(o.text);
            color = o.color; x = o.x; y0 = o.y0; rise = o.rise;
            start = o.start; delay = o.delay; duration = o.duration; scale = o.scale;
            font = o.font; tex = o.tex; shadowTex = o.shadowTex; texW = o.texW; texH = o.texH;
            o.tex = nullptr; o.shadowTex = nullptr;
        }
        return *this;
    }
};

class Game {
public:
    enum class Action {
        MoveRight,
        MoveLeft,
        RotateRight,
        RotateLeft,
        SoftDrop,
        HardDrop,
        Hold
    };

    Game(int width, int height, int cellSize, std::optional<uint32_t> seed = std::nullopt);
    ~Game();

    void run();

private:
    enum class Screen { Main, Settings };

    struct UI {
        static constexpr int BoardOffsetX = 200;
        static constexpr int BoardOffsetY = 10;
    };

    void processInput();
    void update();
    void render();

    void spawnNewShape();
    bool isGameOver() const noexcept;

    void autoRotateCurrentShape(int targetGridX, int targetGridY = -1);
    void snapShapeHorizontally(int targetGridX);
    int  countContactSegments(const Shape& shape, const Board& board) const;

    void renderNextPieces();
    void renderHoldPiece();
    void renderGameOverScreen();
    void renderPauseMenu();
    void renderSettingsScreen();
    void renderInfoCard(int x, int y, int width, int height, int radius,
                        const std::string& title, const std::string& value);
    void renderText(const std::string& text, int x, int y, SDL_Color color);
    void renderTextCenteredScaled(const std::string& text, int cx, int cy,
                                  SDL_Color color, float scale, TTF_Font* useFont);

    void   checkLevelUp();
    void   updateScore(int clearedLines, int dropDistance, bool hardDrop);
    void   updateSpeed();
    void   resetGame();
    void   holdPiece();
    Uint32 getElapsedGameTime() const noexcept;

    bool didWarmup = false;
    void warmupOnce();

    float       countdownScale(Uint32 msInSecond) const noexcept;
    static float easeOutCubic(float t) noexcept;
    static float easeInOutQuad(float t) noexcept;

    void triggerScorePopup(int clearedLines, int linePoints);
    void triggerLevelUpPopup();
    void updateScorePopups();
    void renderScorePopups();

    void triggerScorePopup(const std::string& msg, SDL_Color col, int cx, int cy);

    SDL_Window*   window            = nullptr;
    SDL_Renderer* renderer          = nullptr;
    SDL_Texture*  backgroundTexture = nullptr;

    TTF_Font* fontLarge   = nullptr;
    TTF_Font* fontMedium  = nullptr;
    TTF_Font* fontSmall   = nullptr;
    TTF_Font* fontDefault = nullptr;

    Board                   board;
    Shape                   currentShape;
    Shape                   shadowShape;
    std::optional<Shape>    heldShape  = std::nullopt;
    std::deque<Shape>       nextPieces;
    bool                    canHold    = true;

    int  score             = 0;
    int  level             = 1;
    int  totalLinesCleared = 0;

    int lastMouseTargetGridX = std::numeric_limits<int>::min();
    int lastMouseTargetGridY = std::numeric_limits<int>::min();

    int    cellSize;
    int    windowWidth;
    int    windowHeight;
    int    speed                 = 800;
    Uint32 lastMoveTime          = 0;
    Uint32 lastHorizontalMoveTime= 0;
    Uint32 lastDownMoveTime      = 0;
    Uint32 lastRotationTime      = 0;

    static constexpr Uint32 horizontalMoveDelay =  50;
    static constexpr Uint32 downMoveDelay       = 100;
    static constexpr Uint32 rotationDelay       = 100;

    Uint32 gameStartTime     = 0;
    Uint32 totalPausedTime   = 0;
    Uint32 pauseStartTime    = 0;
    Uint32 countdownStartTime= 0;

    std::vector<ScorePopup> scorePopups;

    bool   running                    = true;
    bool   ignoreNextMouseClick       = false;
    bool   isPaused                   = false;
    bool   resumeCountdownActive      = false;
    bool   isMusicPlaying             = false;
    bool   gameOverMusicPlayed        = false;
    bool   soundEnabled               = false;
    bool   lastSoundEnabled           = false;
    bool   startGameTimerAfterCountdown = true;
    bool   mouseControlEnabled        = true;
    Screen currentScreen              = Screen::Main;

    int   autoPlaceWindow     = 2;
    int   mouseMagnetRadius   = 0;
    float mouseFollowStrength = 0.35f;
    float mouseXAccumulator   = 0.0f;
    float autoPlaceAnchorW    = 2.0f;

    InputHandler inputHandler;

    std::unordered_map<Action, SDL_Keycode> keyBindings = {
        {Action::MoveRight,   SDLK_RIGHT },
        {Action::MoveLeft,    SDLK_LEFT  },
        {Action::RotateRight, SDLK_UP    },
        {Action::RotateLeft,  SDLK_z     },
        {Action::SoftDrop,    SDLK_DOWN  },
        {Action::HardDrop,    SDLK_SPACE },
        {Action::Hold,        SDLK_c     }
    };

    std::vector<std::pair<std::string, Action>> controlMappings = {
        {"MOVE RIGHT",   Action::MoveRight  },
        {"MOVE LEFT",    Action::MoveLeft   },
        {"ROTATE RIGHT", Action::RotateRight},
        {"ROTATE LEFT",  Action::RotateLeft },
        {"SOFT DROP",    Action::SoftDrop   },
        {"HARD DROP",    Action::HardDrop   },
        {"HOLD",         Action::Hold       }
    };

    std::vector<std::shared_ptr<UILabel>>   controlLabels;
    std::vector<std::shared_ptr<UIButton>>  controlButtons;
    mutable std::vector<std::pair<int,int>> tmpCoords;

    bool   waitingForKey   = false;
    Action actionToRebind  = Action::MoveRight;

    std::shared_ptr<UIButton>   newGameBtn;
    std::shared_ptr<UIButton>   quitBtn;
    std::shared_ptr<UIButton>   resumeBtn;
    std::shared_ptr<UIButton>   settingsBtn;
    std::shared_ptr<UIButton>   gameOverNewGameBtn;
    std::shared_ptr<UIButton>   gameOverQuitBtn;
    std::shared_ptr<UIButton>   resetControlsBtn;
    std::shared_ptr<UIButton>   doneBtn;
    std::shared_ptr<UICheckbox> mouseControlCheckbox;
    std::shared_ptr<UICheckbox> soundCheckbox;

    std::optional<Shape> plannedMouseLock;
    bool                 plannedCoversTarget = false;
    
    bool mouseMovedThisFrame = false;

    std::vector<Shape> computeReachableLocks(const Shape& start) const;
    void               planMousePlacement(int targetGridX, int targetGridY);
    int                scorePlacement(const Shape& locked, int targetGridX, int targetGridY) const;

    static int   minYOf(const Shape& s) noexcept;
    static bool  shapeCoversCell(const Shape& s, int gx, int gy) noexcept;
    void         alignToPlannedLock();
    void         performHardDrop();

    bool isCellReachable(int gridX, int gridY) const;

    static float clamp01(float v) noexcept     { return v < 0.f ? 0.f : (v > 1.f ? 1.f : v); }
    static float easeOutQuad(float t) noexcept { return 1.f - (1.f - t) * (1.f - t); }
    static float popupScale(float t) noexcept  {
        const float grow   = 0.30f, hold = 0.15f, settle = 0.55f;
        const float s0     = 0.65f, sOver = 1.25f, sEnd = 1.0f;
        if (t < grow) {
            const float p = t / grow;
            return s0 + (sOver - s0) * easeOutCubic(p);
        } else if (t < grow + hold) {
            return sOver;
        } else {
            float p = (t - (grow + hold)) / settle;
            if (p > 1.f) p = 1.f;
            return sOver + (sEnd - sOver) * easeInOutQuad(p);
        }
    }
    std::mt19937 rng;
};


// --- InputHandler.cpp ---
#include "InputHandler.hpp"

InputHandler::InputHandler() 
    : keyStates{}, quitRequested(false), mouseX(0), mouseY(0),
      leftMouseClicked(false), rightMouseClicked(false) {}

void InputHandler::beginFrame() {
    leftMouseClicked = false;
    rightMouseClicked = false;
    keysJustPressed.clear();
}
void InputHandler::handleEvent(const SDL_Event &event) {
    if (event.type == SDL_KEYDOWN) {
        const auto key = event.key.keysym.sym;
        keyStates[key] = true;
        keyRepeatStates[key] = event.key.repeat;
        if (!event.key.repeat) keysJustPressed.insert(key);
    } else if (event.type == SDL_KEYUP) {
        keyStates[event.key.keysym.sym] = false;
        keyRepeatStates[event.key.keysym.sym] = false;
    } else if (event.type == SDL_MOUSEMOTION) {
        mouseX = event.motion.x;
        mouseY = event.motion.y;
    } else if (event.type == SDL_MOUSEBUTTONDOWN) {
        if (event.button.button == SDL_BUTTON_LEFT) {
            leftMouseClicked = true;
        } else if (event.button.button == SDL_BUTTON_RIGHT) {
            rightMouseClicked = true;
        }
    } else if (event.type == SDL_QUIT) {
        quitRequested = true;
    }
}

bool InputHandler::isKeyPressed(SDL_Keycode key) const noexcept {
    auto it = keyStates.find(key);
    return it != keyStates.end() && it->second;
}

bool InputHandler::isQuitRequested() const noexcept {
    return quitRequested;
}

bool InputHandler::isKeyJustPressed(SDL_Keycode key) const noexcept {
    return keysJustPressed.find(key) != keysJustPressed.end();
}

int InputHandler::getMouseX() const noexcept {
    return mouseX;
}

int InputHandler::getMouseY() const noexcept {
    return mouseY;
}

bool InputHandler::isLeftMouseClicked() const noexcept { 
    return leftMouseClicked;
}
bool InputHandler::isRightMouseClicked() const noexcept {
    return rightMouseClicked;
}

void InputHandler::resetQuitRequested() {
    quitRequested = false;
}

void InputHandler::clearKeyState(SDL_Keycode key) {
    keyStates[key] = false;
    keyRepeatStates[key] = false;
}

const std::unordered_map<SDL_Keycode, bool>& InputHandler::getKeyStates() const {
    return keyStates;
}

// --- InputHandler.hpp ---
#pragma once
#include <unordered_map>
#include <unordered_set>
#include <SDL2/SDL.h>

class InputHandler {
public:
    InputHandler();
    void resetQuitRequested();
    bool isKeyPressed(SDL_Keycode key) const noexcept;
    bool isQuitRequested() const noexcept;
    bool isKeyJustPressed(SDL_Keycode key) const noexcept;
    int getMouseX() const noexcept;
    int getMouseY() const noexcept;
    bool isLeftMouseClicked() const noexcept;
    bool isRightMouseClicked() const noexcept;
    void clearKeyState(SDL_Keycode key);
    void handleEvent(const SDL_Event &event);
    void beginFrame();
    const std::unordered_map<SDL_Keycode, bool>& getKeyStates() const;

private:
    std::unordered_map<SDL_Keycode, bool> keyStates;
    std::unordered_map<SDL_Keycode, bool> keyRepeatStates;
    std::unordered_set<SDL_Keycode> keysJustPressed;

    bool quitRequested;
    int mouseX;
    int mouseY;
    bool leftMouseClicked;
    bool rightMouseClicked;
};

// --- main.cpp ---
#define SDL_MAIN_HANDLED
#define SDLFORMUI_IMPLEMENTATION
#include "SDLFormUI.hpp"
#include "Game.hpp"
#include <iostream>

int main() {
    try {
        const int boardWidth = 600;
        const int boardHeight = 800;
        const int sidebarWidth = 400;
        const int windowWidth = boardWidth + sidebarWidth;
        const int windowHeight = boardHeight + 100;

        const int cellSize = 40;

        Game tetrisGame(windowWidth, windowHeight, cellSize);
        tetrisGame.run();
        SDL_Quit();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}

// --- Shape.cpp ---
#include "Shape.hpp"

Shape::Shape(Type type, int startX, int startY, SDL_Color color)
    : rotationState(0), type(type), color(color){
    coords = getDefaultCoordsForType(type);

    for (auto& coord : coords) {
        coord.first += startX;
        coord.second += startY;
    }

    static const std::unordered_map<Type, SDL_Color> shapeColors = {
        {Type::O, {255, 215, 0, 255}},
        {Type::I, {0, 255, 255, 255}},
        {Type::S, {0, 255, 0, 255}},
        {Type::Z, {255, 0, 0, 255}},
        {Type::L, {255, 140, 0, 255}},
        {Type::J, {0, 0, 255, 255}},
        {Type::T, {128, 0, 128, 255}}
    };
    this->color = shapeColors.at(type);
}

const std::vector<std::pair<int, int>>& Shape::getDefaultCoordsForType(Type type) {
    static const std::unordered_map<Type, std::vector<std::pair<int, int>>> coordsMap = {
        {Type::O, {{-1, 0}, {0, 0}, {-1, 1}, {0, 1}}},
        {Type::I, {{-1, 0}, {-2, 0}, {0, 0}, {1, 0}}},
        {Type::S, {{0, 0}, {-1, 0}, {0, 1}, {1, 1}}},
        {Type::Z, {{0, 0}, {1, 0}, {0, 1}, {-1, 1}}},
        {Type::L, {{-1, 1}, {-1, 0}, {-1, 2}, {0, 2}}},
        {Type::J, {{0, 1}, {0, 0}, {0, 2}, {-1, 2}}},
        {Type::T, {{0, 0}, {-1, 1}, {0, 1}, {1, 1}}}
    };
    return coordsMap.at(type);
}

const std::vector<std::pair<int, int>>& Shape::getCoords() const {
    return coords;
}

void Shape::moveDown() {
    for (auto& coord : coords) {
        coord.second += 1;
    }
}

void Shape::moveLeft() {
    for (const auto& coord : coords) {
        if (coord.first - 1 < 0) return;
    }
    for (auto& coord : coords) {
        coord.first -= 1;
    }
}

void Shape::moveRight(int boardWidth) {
    for (const auto& coord : coords) {
        if (coord.first + 1 >= boardWidth) return;
    }
    for (auto& coord : coords) {
        coord.first += 1;
    }
}

void Shape::rotateClockwise(const std::vector<std::vector<int>>& board, int boardWidth, int boardHeight) {
    if (type == Type::O) return;

    std::vector<std::pair<int, int>> preRotationCoords = coords;
    int oldRotationState = rotationState;

    rotateShape(1);

    if (isValidPosition(board, boardWidth, boardHeight)) return;

    std::vector<std::pair<int, int>> rotatedCoords = coords;
    std::vector<int> kickOffsets = {1, -1, 2, -2};

    for (int dx : kickOffsets) {
        for (size_t i = 0; i < coords.size(); ++i) {
            coords[i].first = rotatedCoords[i].first + dx;
        }
        if (isValidPosition(board, boardWidth, boardHeight)) {
            rotationState = (rotationState + 1) % 4;
            return;
        }
        coords = rotatedCoords;
    }

    coords = preRotationCoords;
    rotationState = oldRotationState;
}

void Shape::rotateCounterClockwise(const std::vector<std::vector<int>>& board, int boardWidth, int boardHeight) {
    if (type == Type::O) return;

    std::vector<std::pair<int, int>> preRotationCoords = coords;
    int oldRotationState = rotationState;

    rotateShape(-1);

    if (isValidPosition(board, boardWidth, boardHeight)) return;

    std::vector<std::pair<int, int>> rotatedCoords = coords;
    std::vector<int> kickOffsets = {1, -1, 2, -2};

    for (int dx : kickOffsets) {
        for (size_t i = 0; i < coords.size(); ++i) {
            coords[i].first = rotatedCoords[i].first + dx;
        }
        if (isValidPosition(board, boardWidth, boardHeight)) {
            rotationState = (rotationState + 3) % 4;
            return;
        }
        coords = rotatedCoords;
    }

    coords = preRotationCoords;
    rotationState = oldRotationState;
}



void Shape::rotateShape(int direction) {
    auto pivot = coords[0];
    for (auto& coord : coords) {
        int x = coord.first - pivot.first;
        int y = coord.second - pivot.second;
        coord.first = pivot.first - direction * y;
        coord.second = pivot.second + direction * x;
    }
    rotationState = (rotationState + direction + 4) % 4;
}

bool Shape::isValidPosition(const std::vector<std::vector<int>>& board, int boardWidth, int boardHeight) const {
    for (const auto& coord : coords) {
        int x = coord.first;
        int y = coord.second;

        if (x < 0 || x >= boardWidth || y < 0 || y >= boardHeight) return false;
        if (board[y][x] != 0) return false;
    }
    return true;
}

void Shape::draw(SDL_Renderer* renderer, int cellSize, int offsetX, int offsetY, bool isShadow) const {
    const int gap = 1;
    const int margin = 1;
    const int borderThickness = 2;
    const int radius = 6;

    SDL_Color mainColor = color;
    SDL_Color borderColor = darker(color, 0.55f);

    for (const auto& coord : coords) {
        int x = offsetX + coord.first * cellSize + gap;
        int y = offsetY + coord.second * cellSize + gap;
        int w = cellSize - 2 * gap;
        int h = cellSize - 2 * gap;

        if (isShadow) {
            draw_smooth_rounded_rect(renderer, x, y, w, h, radius, mainColor, false, 3);
        } else {
            draw_tetris_cell(renderer, x, y, w, h, radius, margin, borderThickness, mainColor, borderColor);
            draw_smooth_parabolic_highlight_arc(renderer, x, y, w, h, margin, borderThickness);
        }
    }
}

Shape::Type Shape::getType() const {
    return type;
}

void Shape::setPosition(int x, int y) {
    int dx = x - coords[0].first;
    int dy = y - coords[0].second;

    for (auto& coord : coords) {
        coord.first += dx;
        coord.second += dy;
    }
}

void Shape::resetRotation() {
    const int pivotX = coords[0].first;
    const int pivotY = coords[0].second;

    const auto& defaultCoords = getDefaultCoordsForType(type);

    coords.clear();
    for (const auto& dc : defaultCoords) {
        coords.emplace_back(pivotX + dc.first, pivotY + dc.second);
    }

    rotationState = 0;
}

void Shape::getLocalCoords(std::vector<std::pair<int,int>>& out) const {
    out.clear();
    if (coords.empty()) return;

    int originX = coords[0].first;
    int originY = coords[0].second;

    for (const auto& c : coords) {
        out.emplace_back(c.first - originX, c.second - originY);
    }
}


// --- Shape.hpp ---
#pragma once
#include <vector>
#include <SDL2/SDL.h>
#include <unordered_map>
#include "DrawUtils.hpp"

class Shape {
public:
    enum class Type { O, I, S, Z, L, J, T };

    std::vector<std::pair<int, int>> coords;

    Shape(Type type, int startX, int startY, SDL_Color color);

    void moveDown();
    void moveLeft();
    void moveRight(int boardWidth);

    void rotateClockwise(const std::vector<std::vector<int>>& board, int boardWidth, int boardHeight);
    void rotateCounterClockwise(const std::vector<std::vector<int>>& board, int boardWidth, int boardHeight);

    const std::vector<std::pair<int, int>>& getCoords() const;
    SDL_Color getColor() const { return color; }

    void draw(SDL_Renderer* renderer, int cellSize, int offsetX = 0, int offsetY = 0, bool isShadow = false) const;
    Type getType() const;

    void setPosition(int x, int y);
    void getLocalCoords(std::vector<std::pair<int,int>>& out) const;

    int rotationState;

private:
    Type type;
    SDL_Color color;

    void rotateShape(int direction);
    bool isValidPosition(const std::vector<std::vector<int>>& board, int boardWidth, int boardHeight) const;
    static const std::vector<std::pair<int, int>>& getDefaultCoordsForType(Type type);
    void resetRotation();
};


// --- SoundManager.cpp ---
#include "SoundManager.hpp"
#include <SDL2/SDL.h>
#include <stdexcept>
#include <iostream>

Mix_Chunk* SoundManager::moveSound = nullptr;
Mix_Chunk* SoundManager::holdSound = nullptr;
Mix_Chunk* SoundManager::dropSound = nullptr;
Mix_Music* SoundManager::backgroundMusic = nullptr;
Mix_Music* SoundManager::gameOverMusic = nullptr;
Mix_Chunk* SoundManager::clearSound = nullptr;

void SoundManager::Load() {
    moveSound = Mix_LoadWAV("sounds/move.ogg");
    holdSound = Mix_LoadWAV("sounds/hold.ogg");
    dropSound = Mix_LoadWAV("sounds/drop.ogg");
    backgroundMusic = Mix_LoadMUS("sounds/bg.ogg");
    clearSound = Mix_LoadWAV("sounds/clear.ogg");
    gameOverMusic = Mix_LoadMUS("sounds/gameover.ogg");

    if (!moveSound) SDL_Log("Failed to load move sound: %s", Mix_GetError());
    if (!holdSound) SDL_Log("Failed to load hold sound: %s", Mix_GetError());
    if (!dropSound) SDL_Log("Failed to load drop sound: %s", Mix_GetError());
    if (!backgroundMusic) SDL_Log("Failed to load bg music: %s", Mix_GetError());
    if (!clearSound) SDL_Log("Failed to load clear sound: %s", Mix_GetError());
    if (!gameOverMusic) SDL_Log("Failed to load game over music: %s", Mix_GetError());
}

void SoundManager::PlayMoveSound() {
    if (moveSound) {
        Mix_PlayChannel(-1, moveSound, 0);
    }
}

void SoundManager::PlayBackgroundMusic() {
    if (backgroundMusic) {
        Mix_PlayMusic(backgroundMusic, -1);
    }
}

void SoundManager::PauseBackgroundMusic() {
    if (Mix_PlayingMusic()) {
        Mix_PauseMusic();
    }
}

void SoundManager::ResumeBackgroundMusic() {
    if (!Mix_PlayingMusic()) {
        PlayBackgroundMusic();
    } else {
        Mix_ResumeMusic();
    }
}

void SoundManager::RestartBackgroundMusic() {
    if (Mix_PlayingMusic()) {
        Mix_HaltMusic();
    }
    if (backgroundMusic) {
        Mix_PlayMusic(backgroundMusic, -1);
    }
}

void SoundManager::PlayHoldSound() {
    if (holdSound) Mix_PlayChannel(-1, holdSound, 0);
}

void SoundManager::PlayDropSound() {
    if (dropSound) Mix_PlayChannel(-1, dropSound, 0);
}

void SoundManager::PlayClearSound() {
    if (clearSound) Mix_PlayChannel(-1, clearSound, 0);
}

void SoundManager::PlayGameOverMusic() {
    if (Mix_PlayingMusic()) Mix_HaltMusic();
    if (gameOverMusic) Mix_PlayMusic(gameOverMusic, 1);
}

void SoundManager::StopGameOverMusic() {
    if (Mix_PlayingMusic()) {
        Mix_HaltMusic();
    }
}

void SoundManager::StopBackgroundMusic() {
    if (Mix_PlayingMusic()) {
        Mix_HaltMusic();
    }
}

void SoundManager::CleanUp() {
    if (moveSound)       { Mix_FreeChunk(moveSound); moveSound = nullptr; }
    if (holdSound)       { Mix_FreeChunk(holdSound); holdSound = nullptr; }
    if (dropSound)       { Mix_FreeChunk(dropSound); dropSound = nullptr; }
    if (clearSound)      { Mix_FreeChunk(clearSound); clearSound = nullptr; }
    if (backgroundMusic) { Mix_FreeMusic(backgroundMusic); backgroundMusic = nullptr; }
    if (gameOverMusic)   { Mix_FreeMusic(gameOverMusic); gameOverMusic = nullptr; }
}

// --- SoundManager.hpp ---
#pragma once
#include <SDL2/SDL_mixer.h>
#include <string>

class SoundManager {
    public:
        static Mix_Chunk* moveSound;
        static Mix_Chunk* holdSound;
        static Mix_Chunk* dropSound;
        static Mix_Music* backgroundMusic;
        static Mix_Chunk* clearSound;
        static Mix_Music* gameOverMusic;
    
        static void Load();
        static void CleanUp();
    
        static void PlayMoveSound();
        static void PlayHoldSound();
        static void PlayDropSound();
        static void PlayBackgroundMusic();
        static void PauseBackgroundMusic();
        static void ResumeBackgroundMusic();
        static void RestartBackgroundMusic();
        static void StopBackgroundMusic();
        static void PlayGameOverMusic();
        static void StopGameOverMusic();
        static void PlayClearSound();
    };

